//
// Generated by JTB 1.3.2
//

package diamond.parser.visitor;

import diamond.parser.syntaxtree.*;

/**
 * All GJ visitors must implement this interface.
 */

public interface GJVisitor<R, A> {

    //
    // GJ Auto class visitors
    //

    public R visit(NodeList n, A argu);

    public R visit(NodeListOptional n, A argu);

    public R visit(NodeOptional n, A argu);

    public R visit(NodeSequence n, A argu);

    public R visit(NodeToken n, A argu);

    //
    // User-generated visitor methods below
    //

    /**
     * prologue -> Prologue() nodeChoice -> ( SelectQuery() | ConstructQuery() |
     * DescribeQuery() | AskQuery() )
     */
    public R visit(Query n, A argu);

    /**
     * nodeOptional -> ( BaseDecl() )? nodeListOptional -> ( PrefixDecl() )*
     */
    public R visit(Prologue n, A argu);

    /**
     * nodeToken -> <BASE> nodeToken1 -> <IRI_REF>
     */
    public R visit(BaseDecl n, A argu);

    /**
     * nodeToken -> <PREFIX> nodeToken1 -> <PNAME_NS> nodeToken2 -> <IRI_REF>
     */
    public R visit(PrefixDecl n, A argu);

    /**
     * nodeToken -> <SELECT> nodeOptional -> ( <DISTINCT> | <REDUCED> )?
     * nodeChoice -> ( ( Var() )+ | "*" ) nodeListOptional -> ( DatasetClause()
     * )* whereClause -> WhereClause() solutionModifier -> SolutionModifier()
     */
    public R visit(SelectQuery n, A argu);

    /**
     * nodeToken -> <CONSTRUCT> constructTemplate -> ConstructTemplate()
     * nodeListOptional -> ( DatasetClause() )* whereClause -> WhereClause()
     * solutionModifier -> SolutionModifier()
     */
    public R visit(ConstructQuery n, A argu);

    /**
     * nodeToken -> <DESCRIBE> nodeChoice -> ( ( VarOrIRIref() )+ | "*" )
     * nodeListOptional -> ( DatasetClause() )* nodeOptional -> ( WhereClause()
     * )? solutionModifier -> SolutionModifier()
     */
    public R visit(DescribeQuery n, A argu);

    /**
     * nodeToken -> <ASK> nodeListOptional -> ( DatasetClause() )* whereClause
     * -> WhereClause()
     */
    public R visit(AskQuery n, A argu);

    /**
     * nodeToken -> <FROM> nodeChoice -> ( DefaultGraphClause() |
     * NamedGraphClause() )
     */
    public R visit(DatasetClause n, A argu);

    /**
     * sourceSelector -> SourceSelector()
     */
    public R visit(DefaultGraphClause n, A argu);

    /**
     * nodeToken -> <NAMED> sourceSelector -> SourceSelector()
     */
    public R visit(NamedGraphClause n, A argu);

    /**
     * iRIref -> IRIref()
     */
    public R visit(SourceSelector n, A argu);

    /**
     * nodeOptional -> ( <WHERE> )? groupGraphPattern -> GroupGraphPattern()
     */
    public R visit(WhereClause n, A argu);

    /**
     * nodeOptional -> ( OrderClause() )? nodeOptional1 -> (
     * LimitOffsetClauses() )?
     */
    public R visit(SolutionModifier n, A argu);

    /**
     * nodeChoice -> ( LimitClause() ( OffsetClause() )? | OffsetClause() (
     * LimitClause() )? )
     */
    public R visit(LimitOffsetClauses n, A argu);

    /**
     * nodeToken -> <ORDER> nodeToken1 -> <BY> nodeList -> ( OrderCondition() )+
     */
    public R visit(OrderClause n, A argu);

    /**
     * nodeChoice -> ( ( <ASC> | <DESC> ) BrackettedExpression() ) | (
     * Constraint() | Var() )
     */
    public R visit(OrderCondition n, A argu);

    /**
     * nodeToken -> <LIMIT> nodeToken1 -> <INTEGER>
     */
    public R visit(LimitClause n, A argu);

    /**
     * nodeToken -> <OFFSET> nodeToken1 -> <INTEGER>
     */
    public R visit(OffsetClause n, A argu);

    /**
     * nodeToken -> "{" nodeOptional -> ( TriplesBlock() )? nodeListOptional ->
     * ( GraphPatternNotTriples() ( "." )? ( TriplesBlock() )? )* nodeToken1 ->
     * "}"
     */
    public R visit(GroupGraphPattern n, A argu);

    /**
     * triplesSameSubject -> TriplesSameSubject() nodeOptional -> ( "." (
     * TriplesBlock() )? )?
     */
    public R visit(TriplesBlock n, A argu);

    /**
     * nodeChoice -> OptionalGraphPattern() | GroupOrUnionGraphPattern() |
     * GraphGraphPattern() | Filter() | Bind()
     */
    public R visit(GraphPatternNotTriples n, A argu);

    /**
     * nodeToken -> <OPTIONAL> groupGraphPattern -> GroupGraphPattern()
     */
    public R visit(OptionalGraphPattern n, A argu);

    /**
     * nodeToken -> <GRAPH> varOrIRIref -> VarOrIRIref() groupGraphPattern ->
     * GroupGraphPattern()
     */
    public R visit(GraphGraphPattern n, A argu);

    /**
     * groupGraphPattern -> GroupGraphPattern() nodeListOptional -> ( <UNION>
     * GroupGraphPattern() )*
     */
    public R visit(GroupOrUnionGraphPattern n, A argu);

    /**
     * nodeToken -> <FILTER> constraint -> Constraint()
     */
    public R visit(Filter n, A argu);

    /**
     * nodeChoice -> BrackettedExpression() | BuiltInCall() | FunctionCall()
     */
    public R visit(Constraint n, A argu);

    /**
     * iRIref -> IRIref() argList -> ArgList()
     */
    public R visit(FunctionCall n, A argu);

    /**
     * nodeChoice -> ( <NIL> | "(" Expression() ( "," Expression() )* ")" )
     */
    public R visit(ArgList n, A argu);

    /**
     * nodeToken -> "{" nodeOptional -> ( ConstructTriples() )? nodeToken1 ->
     * "}"
     */
    public R visit(ConstructTemplate n, A argu);

    /**
     * triplesSameSubject -> TriplesSameSubject() nodeOptional -> ( "." (
     * ConstructTriples() )? )?
     */
    public R visit(ConstructTriples n, A argu);

    /**
     * nodeChoice -> VarOrTerm() PropertyListNotEmpty() | TriplesNode()
     * PropertyList()
     */
    public R visit(TriplesSameSubject n, A argu);

    /**
     * verb -> Verb() objectList -> ObjectList() nodeListOptional -> ( ";" (
     * Verb() ObjectList() )? )*
     */
    public R visit(PropertyListNotEmpty n, A argu);

    /**
     * nodeOptional -> ( PropertyListNotEmpty() )?
     */
    public R visit(PropertyList n, A argu);

    /**
     * sparqlObject -> SparqlObject() nodeListOptional -> ( "," SparqlObject()
     * )*
     */
    public R visit(ObjectList n, A argu);

    /**
     * graphNode -> GraphNode()
     */
    public R visit(SparqlObject n, A argu);

    /**
     * nodeChoice -> VarOrIRIref() | <TYPE_A> | PutativeLiteral()
     */
    public R visit(Verb n, A argu);

    /**
     * nodeChoice -> SparqlCollection() | BlankNodePropertyList()
     */
    public R visit(TriplesNode n, A argu);

    /**
     * nodeToken -> "[" propertyListNotEmpty -> PropertyListNotEmpty()
     * nodeToken1 -> "]"
     */
    public R visit(BlankNodePropertyList n, A argu);

    /**
     * nodeToken -> "(" nodeList -> ( GraphNode() )+ nodeToken1 -> ")"
     */
    public R visit(SparqlCollection n, A argu);

    /**
     * nodeChoice -> VarOrTerm() | TriplesNode()
     */
    public R visit(GraphNode n, A argu);

    /**
     * nodeChoice -> Var() | GraphTerm()
     */
    public R visit(VarOrTerm n, A argu);

    /**
     * nodeChoice -> Var() | IRIref()
     */
    public R visit(VarOrIRIref n, A argu);

    /**
     * nodeChoice -> <VAR1> | <VAR2>
     */
    public R visit(Var n, A argu);

    /**
     * nodeChoice -> IRIref() | RDFLiteral() | NumericLiteral() |
     * BooleanLiteral() | BlankNode() | PutativeLiteral() | <NIL>
     */
    public R visit(GraphTerm n, A argu);

    /**
     * conditionalOrExpression -> ConditionalOrExpression()
     */
    public R visit(Expression n, A argu);

    /**
     * conditionalAndExpression -> ConditionalAndExpression() nodeListOptional
     * -> ( "||" ConditionalAndExpression() )*
     */
    public R visit(ConditionalOrExpression n, A argu);

    /**
     * valueLogical -> ValueLogical() nodeListOptional -> ( "&&" ValueLogical()
     * )*
     */
    public R visit(ConditionalAndExpression n, A argu);

    /**
     * relationalExpression -> RelationalExpression()
     */
    public R visit(ValueLogical n, A argu);

/**
     * numericExpression -> NumericExpression() nodeOptional -> ( "="
     * NumericExpression() | "!=" NumericExpression() | "<" NumericExpression()
     * | ">" NumericExpression() | "<=" NumericExpression() | ">="
     * NumericExpression() )?
     */
    public R visit(RelationalExpression n, A argu);

    /**
     * additiveExpression -> AdditiveExpression()
     */
    public R visit(NumericExpression n, A argu);

    /**
     * multiplicativeExpression -> MultiplicativeExpression() nodeListOptional
     * -> ( "+" MultiplicativeExpression() | "-" MultiplicativeExpression() |
     * NumericLiteralPositive() | NumericLiteralNegative() )*
     */
    public R visit(AdditiveExpression n, A argu);

    /**
     * unaryExpression -> UnaryExpression() nodeListOptional -> ( "*"
     * UnaryExpression() | "/" UnaryExpression() )*
     */
    public R visit(MultiplicativeExpression n, A argu);

    /**
     * nodeChoice -> ( "!" PrimaryExpression() | "+" PrimaryExpression() | "-"
     * PrimaryExpression() | PrimaryExpression() )
     */
    public R visit(UnaryExpression n, A argu);

    /**
     * nodeChoice -> BrackettedExpression() | BuiltInCall() | IRIrefOrFunction()
     * | RDFLiteral() | NumericLiteral() | BooleanLiteral() | Var()
     */
    public R visit(PrimaryExpression n, A argu);

    /**
     * nodeToken -> "(" expression -> Expression() nodeToken1 -> ")"
     */
    public R visit(BrackettedExpression n, A argu);

    /**
     * nodeChoice -> ( <STR> "(" Expression() ")" | <LANG> "(" Expression() ")"
     * | <LANGMATCHES> "(" Expression() "," Expression() ")" | <DATATYPE> "("
     * Expression() ")" | <BOUND> "(" Var() ")" | <SAME_TERM> "(" Expression()
     * "," Expression() ")" | <IS_IRI> "(" Expression() ")" | <IS_URI> "("
     * Expression() ")" | <IS_BLANK> "(" Expression() ")" | <IS_LITERAL> "("
     * Expression() ")" | RegexExpression() )
     */
    public R visit(BuiltInCall n, A argu);

    /**
     * nodeToken -> <REGEX> nodeToken1 -> "(" expression -> Expression()
     * nodeToken2 -> "," expression1 -> Expression() nodeOptional -> ( ","
     * Expression() )? nodeToken3 -> ")"
     */
    public R visit(RegexExpression n, A argu);

    /**
     * iRIref -> IRIref() nodeOptional -> ( ArgList() )?
     */
    public R visit(IRIrefOrFunction n, A argu);

    /**
     * sparqlString -> SparqlString() nodeOptional -> ( <LANGTAG> | ( "^^"
     * IRIref() ) )?
     */
    public R visit(RDFLiteral n, A argu);

    /**
     * nodeChoice -> ( NumericLiteralUnsigned() | NumericLiteralPositive() |
     * NumericLiteralNegative() )
     */
    public R visit(NumericLiteral n, A argu);

    /**
     * nodeChoice -> <INTEGER> | <DECIMAL> | <DOUBLE>
     */
    public R visit(NumericLiteralUnsigned n, A argu);

    /**
     * nodeChoice -> <INTEGER_POSITIVE> | <DECIMAL_POSITIVE> | <DOUBLE_POSITIVE>
     */
    public R visit(NumericLiteralPositive n, A argu);

    /**
     * nodeChoice -> <INTEGER_NEGATIVE> | <DECIMAL_NEGATIVE> | <DOUBLE_NEGATIVE>
     */
    public R visit(NumericLiteralNegative n, A argu);

    /**
     * nodeChoice -> <TRUE> | <FALSE>
     */
    public R visit(BooleanLiteral n, A argu);

    /**
     * nodeChoice -> <STRING_LITERAL1> | <STRING_LITERAL2> |
     * <STRING_LITERAL_LONG1> | <STRING_LITERAL_LONG2>
     */
    public R visit(SparqlString n, A argu);

    /**
     * nodeChoice -> <IRI_REF> | PrefixedName()
     */
    public R visit(IRIref n, A argu);

    /**
     * nodeChoice -> <PNAME_LN> | <PNAME_NS>
     */
    public R visit(PrefixedName n, A argu);

    /**
     * nodeChoice -> <BLANK_NODE_LABEL> | <ANON>
     */
    public R visit(BlankNode n, A argu);

    /**
     * nodeToken -> <PUTATIVE_LITERAL>
     */
    public R visit(PutativeLiteral n, A argu);

    /**
     * prologue -> Prologue() nodeList -> ( "[" Rule() "]" )+
     */
    public R visit(SparqlSpin n, A argu);

    /**
     * consequent -> Consequent() nodeToken -> <WHERE> antecedent ->
     * Antecedent()
     */
    public R visit(Rule n, A argu);

    /**
     * nodeChoice -> RuleConstructClause() | RuleModifyClause()
     */
    public R visit(Consequent n, A argu);

    /**
     * nodeToken -> <CONSTRUCT> constructTemplate -> ConstructTemplate()
     * nodeListOptional -> ( DatasetClause() )*
     */
    public R visit(RuleConstructClause n, A argu);

    /**
     * nodeToken -> <DELETE> deleteClause -> DeleteClause() nodeOptional -> (
     * <INSERT> InsertClause() )?
     */
    public R visit(RuleModifyClause n, A argu);

    /**
     * nodeToken -> "{" nodeOptional -> ( DeleteTriples() )? nodeToken1 -> "}"
     */
    public R visit(DeleteClause n, A argu);

    /**
     * triplesSameSubject -> TriplesSameSubject() nodeOptional -> ( "." (
     * DeleteTriples() )? )?
     */
    public R visit(DeleteTriples n, A argu);

    /**
     * nodeToken -> "{" nodeOptional -> ( InsertTriples() )? nodeToken1 -> "}"
     */
    public R visit(InsertClause n, A argu);

    /**
     * triplesSameSubject -> TriplesSameSubject() nodeOptional -> ( "." (
     * InsertTriples() )? )?
     */
    public R visit(InsertTriples n, A argu);

    /**
     * whereClause -> WhereClause() solutionModifier -> SolutionModifier()
     */
    public R visit(Antecedent n, A argu);

    /**
     * nodeToken -> <BIND> nodeToken1 -> "(" expression -> Expression()
     * nodeToken2 -> <AS> var -> Var() nodeToken3 -> ")"
     */
    public R visit(Bind n, A argu);

}
