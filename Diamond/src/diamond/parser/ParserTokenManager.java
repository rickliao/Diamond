/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package diamond.parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class ParserTokenManager implements ParserConstants {

    /** Debug output. */
    public java.io.PrintStream debugStream = System.out;

    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
        case 8:
            jjmatchedKind = 4;
            return jjMoveNfa_0(0, 0);
        case 9:
            jjmatchedKind = 1;
            return jjMoveNfa_0(0, 0);
        case 10:
            jjmatchedKind = 2;
            return jjMoveNfa_0(0, 0);
        case 12:
            jjmatchedKind = 5;
            return jjMoveNfa_0(0, 0);
        case 13:
            jjmatchedKind = 3;
            return jjMoveNfa_0(0, 0);
        case 32:
            jjmatchedKind = 9;
            return jjMoveNfa_0(0, 0);
        case 33:
            jjmatchedKind = 103;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
        case 34:
            jjmatchedKind = 6;
            return jjMoveNfa_0(0, 0);
        case 38:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
        case 39:
            jjmatchedKind = 7;
            return jjMoveNfa_0(0, 0);
        case 40:
            jjmatchedKind = 86;
            return jjMoveNfa_0(0, 0);
        case 41:
            jjmatchedKind = 88;
            return jjMoveNfa_0(0, 0);
        case 42:
            jjmatchedKind = 82;
            return jjMoveNfa_0(0, 0);
        case 43:
            jjmatchedKind = 100;
            return jjMoveNfa_0(0, 0);
        case 44:
            jjmatchedKind = 87;
            return jjMoveNfa_0(0, 0);
        case 45:
            jjmatchedKind = 101;
            return jjMoveNfa_0(0, 0);
        case 46:
            jjmatchedKind = 84;
            return jjMoveNfa_0(0, 0);
        case 47:
            jjmatchedKind = 102;
            return jjMoveNfa_0(0, 0);
        case 59:
            jjmatchedKind = 89;
            return jjMoveNfa_0(0, 0);
        case 60:
            jjmatchedKind = 96;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
        case 61:
            jjmatchedKind = 94;
            return jjMoveNfa_0(0, 0);
        case 62:
            jjmatchedKind = 97;
            return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
        case 65:
            return jjMoveStringLiteralDfa1_0(0x800800008000L, 0x0L);
        case 66:
            return jjMoveStringLiteralDfa1_0(0x400200020400L, 0x0L);
        case 67:
            return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
        case 68:
            return jjMoveStringLiteralDfa1_0(0x201100104000L, 0x0L);
        case 70:
            return jjMoveStringLiteralDfa1_0(0x80010400000L, 0x0L);
        case 71:
            return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
        case 73:
            return jjMoveStringLiteralDfa1_0(0x11e000000000L, 0x0L);
        case 76:
            return jjMoveStringLiteralDfa1_0(0xc0040000L, 0x0L);
        case 78:
            return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
        case 79:
            return jjMoveStringLiteralDfa1_0(0x4090000L, 0x0L);
        case 80:
            return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
        case 82:
            return jjMoveStringLiteralDfa1_0(0x20000200000L, 0x0L);
        case 83:
            return jjMoveStringLiteralDfa1_0(0x420001000L, 0x0L);
        case 84:
            return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
        case 85:
            return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
        case 87:
            return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
        case 91:
            jjmatchedKind = 90;
            return jjMoveNfa_0(0, 0);
        case 92:
            jjmatchedKind = 8;
            return jjMoveNfa_0(0, 0);
        case 93:
            jjmatchedKind = 91;
            return jjMoveNfa_0(0, 0);
        case 94:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
        case 97:
            jjmatchedKind = 48;
            return jjMoveStringLiteralDfa1_0(0x800800008000L, 0x0L);
        case 98:
            return jjMoveStringLiteralDfa1_0(0x400200020400L, 0x0L);
        case 99:
            return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
        case 100:
            return jjMoveStringLiteralDfa1_0(0x201100104000L, 0x0L);
        case 102:
            return jjMoveStringLiteralDfa1_0(0x80010400000L, 0x0L);
        case 103:
            return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
        case 105:
            return jjMoveStringLiteralDfa1_0(0x11e000000000L, 0x0L);
        case 108:
            return jjMoveStringLiteralDfa1_0(0xc0040000L, 0x0L);
        case 110:
            return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
        case 111:
            return jjMoveStringLiteralDfa1_0(0x4090000L, 0x0L);
        case 112:
            return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
        case 114:
            return jjMoveStringLiteralDfa1_0(0x20000200000L, 0x0L);
        case 115:
            return jjMoveStringLiteralDfa1_0(0x420001000L, 0x0L);
        case 116:
            return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
        case 117:
            return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
        case 119:
            return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
        case 123:
            jjmatchedKind = 83;
            return jjMoveNfa_0(0, 0);
        case 124:
            return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
        case 125:
            jjmatchedKind = 85;
            return jjMoveNfa_0(0, 0);
        default:
            return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 0);
        }
        switch (curChar) {
        case 38:
            if ((active1 & 0x20000000L) != 0L) {
                jjmatchedKind = 93;
                jjmatchedPos = 1;
            }
            break;
        case 61:
            if ((active1 & 0x80000000L) != 0L) {
                jjmatchedKind = 95;
                jjmatchedPos = 1;
            } else if ((active1 & 0x400000000L) != 0L) {
                jjmatchedKind = 98;
                jjmatchedPos = 1;
            } else if ((active1 & 0x800000000L) != 0L) {
                jjmatchedKind = 99;
                jjmatchedPos = 1;
            }
            break;
        case 65:
            return jjMoveStringLiteralDfa2_0(active0, 0x805c0800400L, active1, 0L);
        case 69:
            return jjMoveStringLiteralDfa2_0(active0, 0x221000205000L, active1, 0L);
        case 70:
            return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
        case 72:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
        case 73:
            return jjMoveStringLiteralDfa2_0(active0, 0x400010140000L, active1, 0L);
        case 78:
            return jjMoveStringLiteralDfa2_0(active0, 0x100008000000L, active1, 0L);
        case 79:
            return jjMoveStringLiteralDfa2_0(active0, 0x200002000L, active1, 0L);
        case 80:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
        case 82:
            return jjMoveStringLiteralDfa2_0(active0, 0x40002410800L, active1, 0L);
        case 83:
            if ((active0 & 0x800000000000L) != 0L) {
                jjmatchedKind = 47;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x1e800008000L, active1, 0L);
        case 84:
            return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
        case 89:
            if ((active0 & 0x20000L) != 0L) {
                jjmatchedKind = 17;
                jjmatchedPos = 1;
            }
            break;
        case 94:
            if ((active1 & 0x10000000000L) != 0L) {
                jjmatchedKind = 104;
                jjmatchedPos = 1;
            }
            break;
        case 97:
            return jjMoveStringLiteralDfa2_0(active0, 0x805c0800400L, active1, 0L);
        case 101:
            return jjMoveStringLiteralDfa2_0(active0, 0x221000205000L, active1, 0L);
        case 102:
            return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
        case 104:
            return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
        case 105:
            return jjMoveStringLiteralDfa2_0(active0, 0x400010140000L, active1, 0L);
        case 110:
            return jjMoveStringLiteralDfa2_0(active0, 0x100008000000L, active1, 0L);
        case 111:
            return jjMoveStringLiteralDfa2_0(active0, 0x200002000L, active1, 0L);
        case 112:
            return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
        case 114:
            return jjMoveStringLiteralDfa2_0(active0, 0x40002410800L, active1, 0L);
        case 115:
            if ((active0 & 0x800000000000L) != 0L) {
                jjmatchedKind = 47;
                jjmatchedPos = 1;
            }
            return jjMoveStringLiteralDfa2_0(active0, 0x1e800008000L, active1, 0L);
        case 116:
            return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
        case 121:
            if ((active0 & 0x20000L) != 0L) {
                jjmatchedKind = 17;
                jjmatchedPos = 1;
            }
            break;
        case 124:
            if ((active1 & 0x10000000L) != 0L) {
                jjmatchedKind = 92;
                jjmatchedPos = 1;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 1);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjMoveNfa_0(0, 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 1);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
        case 66:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
        case 67:
            if ((active0 & 0x800000000L) != 0L) {
                jjmatchedKind = 35;
                jjmatchedPos = 2;
            }
            break;
        case 68:
            return jjMoveStringLiteralDfa3_0(active0, 0x210000L);
        case 69:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000800L);
        case 70:
            return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
        case 71:
            return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
        case 73:
            return jjMoveStringLiteralDfa3_0(active0, 0x4008000000L);
        case 75:
            if ((active0 & 0x8000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 2;
            }
            break;
        case 76:
            return jjMoveStringLiteralDfa3_0(active0, 0x290010001000L);
        case 77:
            return jjMoveStringLiteralDfa3_0(active0, 0x400840000L);
        case 78:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000c0002000L);
        case 79:
            return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
        case 82:
            if ((active0 & 0x20000000L) != 0L) {
                jjmatchedKind = 29;
                jjmatchedPos = 2;
            }
            break;
        case 83:
            return jjMoveStringLiteralDfa3_0(active0, 0x101000104400L);
        case 84:
            return jjMoveStringLiteralDfa3_0(active0, 0x104000000L);
        case 85:
            return jjMoveStringLiteralDfa3_0(active0, 0x42200000000L);
        case 97:
            return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
        case 98:
            return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
        case 99:
            if ((active0 & 0x800000000L) != 0L) {
                jjmatchedKind = 35;
                jjmatchedPos = 2;
            }
            break;
        case 100:
            return jjMoveStringLiteralDfa3_0(active0, 0x210000L);
        case 101:
            return jjMoveStringLiteralDfa3_0(active0, 0x1000800L);
        case 102:
            return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
        case 103:
            return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
        case 105:
            return jjMoveStringLiteralDfa3_0(active0, 0x4008000000L);
        case 107:
            if ((active0 & 0x8000L) != 0L) {
                jjmatchedKind = 15;
                jjmatchedPos = 2;
            }
            break;
        case 108:
            return jjMoveStringLiteralDfa3_0(active0, 0x290010001000L);
        case 109:
            return jjMoveStringLiteralDfa3_0(active0, 0x400840000L);
        case 110:
            return jjMoveStringLiteralDfa3_0(active0, 0x4000c0002000L);
        case 111:
            return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
        case 114:
            if ((active0 & 0x20000000L) != 0L) {
                jjmatchedKind = 29;
                jjmatchedPos = 2;
            }
            break;
        case 115:
            return jjMoveStringLiteralDfa3_0(active0, 0x101000104400L);
        case 116:
            return jjMoveStringLiteralDfa3_0(active0, 0x104000000L);
        case 117:
            return jjMoveStringLiteralDfa3_0(active0, 0x42200000000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 2);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 2);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 2);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
        case 67:
            if ((active0 & 0x1000000000L) != 0L) {
                jjmatchedKind = 36;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
        case 68:
            if ((active0 & 0x400000000000L) != 0L) {
                jjmatchedKind = 46;
                jjmatchedPos = 3;
            }
            break;
        case 69:
            if ((active0 & 0x400L) != 0L) {
                jjmatchedKind = 10;
                jjmatchedPos = 3;
            } else if ((active0 & 0x40000000000L) != 0L) {
                jjmatchedKind = 42;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x320400811000L);
        case 70:
            return jjMoveStringLiteralDfa4_0(active0, 0x800L);
        case 71:
            if ((active0 & 0x40000000L) != 0L) {
                jjmatchedKind = 30;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
        case 73:
            return jjMoveStringLiteralDfa4_0(active0, 0x10004040000L);
        case 76:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
        case 77:
            if ((active0 & 0x400000L) != 0L) {
                jjmatchedKind = 22;
                jjmatchedPos = 3;
            }
            break;
        case 78:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
        case 79:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
        case 80:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
        case 82:
            return jjMoveStringLiteralDfa4_0(active0, 0x6001000000L);
        case 83:
            return jjMoveStringLiteralDfa4_0(active0, 0x80000082000L);
        case 84:
            return jjMoveStringLiteralDfa4_0(active0, 0x10100000L);
        case 85:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
        case 97:
            return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
        case 99:
            if ((active0 & 0x1000000000L) != 0L) {
                jjmatchedKind = 36;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
        case 100:
            if ((active0 & 0x400000000000L) != 0L) {
                jjmatchedKind = 46;
                jjmatchedPos = 3;
            }
            break;
        case 101:
            if ((active0 & 0x400L) != 0L) {
                jjmatchedKind = 10;
                jjmatchedPos = 3;
            } else if ((active0 & 0x40000000000L) != 0L) {
                jjmatchedKind = 42;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x320400811000L);
        case 102:
            return jjMoveStringLiteralDfa4_0(active0, 0x800L);
        case 103:
            if ((active0 & 0x40000000L) != 0L) {
                jjmatchedKind = 30;
                jjmatchedPos = 3;
            }
            return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
        case 105:
            return jjMoveStringLiteralDfa4_0(active0, 0x10004040000L);
        case 108:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
        case 109:
            if ((active0 & 0x400000L) != 0L) {
                jjmatchedKind = 22;
                jjmatchedPos = 3;
            }
            break;
        case 110:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
        case 111:
            return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
        case 112:
            return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
        case 114:
            return jjMoveStringLiteralDfa4_0(active0, 0x6001000000L);
        case 115:
            return jjMoveStringLiteralDfa4_0(active0, 0x80000082000L);
        case 116:
            return jjMoveStringLiteralDfa4_0(active0, 0x10100000L);
        case 117:
            return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 3);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 3);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 3);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
        case 67:
            return jjMoveStringLiteralDfa5_0(active0, 0x201000L);
        case 68:
            if ((active0 & 0x800000L) != 0L) {
                jjmatchedKind = 23;
                jjmatchedPos = 4;
            } else if ((active0 & 0x200000000L) != 0L) {
                jjmatchedKind = 33;
                jjmatchedPos = 4;
            }
            break;
        case 69:
            if ((active0 & 0x1000000L) != 0L) {
                jjmatchedKind = 24;
                jjmatchedPos = 4;
            } else if ((active0 & 0x80000000000L) != 0L) {
                jjmatchedKind = 43;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x10080000L);
        case 72:
            if ((active0 & 0x2000000L) != 0L) {
                jjmatchedKind = 25;
                jjmatchedPos = 4;
            }
            break;
        case 73:
            if ((active0 & 0x2000000000L) != 0L) {
                jjmatchedKind = 37;
                jjmatchedPos = 4;
            } else if ((active0 & 0x4000000000L) != 0L) {
                jjmatchedKind = 38;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x100800L);
        case 77:
            return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
        case 78:
            if ((active0 & 0x8000000L) != 0L) {
                jjmatchedKind = 27;
                jjmatchedPos = 4;
            }
            break;
        case 79:
            return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
        case 82:
            if ((active0 & 0x10000L) != 0L) {
                jjmatchedKind = 16;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x100000004000L);
        case 84:
            if ((active0 & 0x40000L) != 0L) {
                jjmatchedKind = 18;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x210500002000L);
        case 88:
            if ((active0 & 0x20000000000L) != 0L) {
                jjmatchedKind = 41;
                jjmatchedPos = 4;
            }
            break;
        case 97:
            return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
        case 99:
            return jjMoveStringLiteralDfa5_0(active0, 0x201000L);
        case 100:
            if ((active0 & 0x800000L) != 0L) {
                jjmatchedKind = 23;
                jjmatchedPos = 4;
            } else if ((active0 & 0x200000000L) != 0L) {
                jjmatchedKind = 33;
                jjmatchedPos = 4;
            }
            break;
        case 101:
            if ((active0 & 0x1000000L) != 0L) {
                jjmatchedKind = 24;
                jjmatchedPos = 4;
            } else if ((active0 & 0x80000000000L) != 0L) {
                jjmatchedKind = 43;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x10080000L);
        case 104:
            if ((active0 & 0x2000000L) != 0L) {
                jjmatchedKind = 25;
                jjmatchedPos = 4;
            }
            break;
        case 105:
            if ((active0 & 0x2000000000L) != 0L) {
                jjmatchedKind = 37;
                jjmatchedPos = 4;
            } else if ((active0 & 0x4000000000L) != 0L) {
                jjmatchedKind = 38;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x100800L);
        case 109:
            return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
        case 110:
            if ((active0 & 0x8000000L) != 0L) {
                jjmatchedKind = 27;
                jjmatchedPos = 4;
            }
            break;
        case 111:
            return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
        case 114:
            if ((active0 & 0x10000L) != 0L) {
                jjmatchedKind = 16;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x100000004000L);
        case 116:
            if ((active0 & 0x40000L) != 0L) {
                jjmatchedKind = 18;
                jjmatchedPos = 4;
            }
            return jjMoveStringLiteralDfa5_0(active0, 0x210500002000L);
        case 120:
            if ((active0 & 0x20000000000L) != 0L) {
                jjmatchedKind = 41;
                jjmatchedPos = 4;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 4);
    }

    private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 4);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 4);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
        case 69:
            if ((active0 & 0x200000000000L) != 0L) {
                jjmatchedKind = 45;
                jjmatchedPos = 5;
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x10400200000L);
        case 73:
            return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
        case 78:
            return jjMoveStringLiteralDfa6_0(active0, 0x8004100000L);
        case 82:
            if ((active0 & 0x10000000L) != 0L) {
                jjmatchedKind = 28;
                jjmatchedPos = 5;
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
        case 84:
            if ((active0 & 0x1000L) != 0L) {
                jjmatchedKind = 12;
                jjmatchedPos = 5;
            } else if ((active0 & 0x80000L) != 0L) {
                jjmatchedKind = 19;
                jjmatchedPos = 5;
            } else if ((active0 & 0x100000000000L) != 0L) {
                jjmatchedKind = 44;
                jjmatchedPos = 5;
            }
            break;
        case 88:
            if ((active0 & 0x800L) != 0L) {
                jjmatchedKind = 11;
                jjmatchedPos = 5;
            }
            break;
        case 89:
            return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
        case 97:
            return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
        case 101:
            if ((active0 & 0x200000000000L) != 0L) {
                jjmatchedKind = 45;
                jjmatchedPos = 5;
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x10400200000L);
        case 105:
            return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
        case 110:
            return jjMoveStringLiteralDfa6_0(active0, 0x8004100000L);
        case 114:
            if ((active0 & 0x10000000L) != 0L) {
                jjmatchedKind = 28;
                jjmatchedPos = 5;
            }
            return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
        case 116:
            if ((active0 & 0x1000L) != 0L) {
                jjmatchedKind = 12;
                jjmatchedPos = 5;
            } else if ((active0 & 0x80000L) != 0L) {
                jjmatchedKind = 19;
                jjmatchedPos = 5;
            } else if ((active0 & 0x100000000000L) != 0L) {
                jjmatchedKind = 44;
                jjmatchedPos = 5;
            }
            break;
        case 120:
            if ((active0 & 0x800L) != 0L) {
                jjmatchedKind = 11;
                jjmatchedPos = 5;
            }
            break;
        case 121:
            return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 5);
    }

    private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 5);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 5);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
        case 66:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
        case 67:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
        case 68:
            if ((active0 & 0x200000L) != 0L) {
                jjmatchedKind = 21;
                jjmatchedPos = 6;
            }
            break;
        case 75:
            if ((active0 & 0x8000000000L) != 0L) {
                jjmatchedKind = 39;
                jjmatchedPos = 6;
            }
            break;
        case 80:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
        case 82:
            return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L);
        case 84:
            return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
        case 85:
            return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
        case 97:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
        case 98:
            return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
        case 99:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
        case 100:
            if ((active0 & 0x200000L) != 0L) {
                jjmatchedKind = 21;
                jjmatchedPos = 6;
            }
            break;
        case 107:
            if ((active0 & 0x8000000000L) != 0L) {
                jjmatchedKind = 39;
                jjmatchedPos = 6;
            }
            break;
        case 112:
            return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
        case 114:
            return jjMoveStringLiteralDfa7_0(active0, 0x10400000000L);
        case 116:
            return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
        case 117:
            return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 6);
    }

    private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 6);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 6);
        }
        switch (curChar) {
        case 65:
            return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
        case 67:
            return jjMoveStringLiteralDfa8_0(active0, 0x80002000L);
        case 69:
            if ((active0 & 0x4000L) != 0L) {
                jjmatchedKind = 14;
                jjmatchedPos = 7;
            } else if ((active0 & 0x100000000L) != 0L) {
                jjmatchedKind = 32;
                jjmatchedPos = 7;
            }
            break;
        case 76:
            if ((active0 & 0x4000000L) != 0L) {
                jjmatchedKind = 26;
                jjmatchedPos = 7;
            }
            break;
        case 77:
            if ((active0 & 0x400000000L) != 0L) {
                jjmatchedKind = 34;
                jjmatchedPos = 7;
            }
            break;
        case 84:
            if ((active0 & 0x100000L) != 0L) {
                jjmatchedKind = 20;
                jjmatchedPos = 7;
            }
            break;
        case 97:
            return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
        case 99:
            return jjMoveStringLiteralDfa8_0(active0, 0x80002000L);
        case 101:
            if ((active0 & 0x4000L) != 0L) {
                jjmatchedKind = 14;
                jjmatchedPos = 7;
            } else if ((active0 & 0x100000000L) != 0L) {
                jjmatchedKind = 32;
                jjmatchedPos = 7;
            }
            break;
        case 108:
            if ((active0 & 0x4000000L) != 0L) {
                jjmatchedKind = 26;
                jjmatchedPos = 7;
            }
            break;
        case 109:
            if ((active0 & 0x400000000L) != 0L) {
                jjmatchedKind = 34;
                jjmatchedPos = 7;
            }
            break;
        case 116:
            if ((active0 & 0x100000L) != 0L) {
                jjmatchedKind = 20;
                jjmatchedPos = 7;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 7);
    }

    private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 7);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 7);
        }
        switch (curChar) {
        case 72:
            return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
        case 76:
            if ((active0 & 0x10000000000L) != 0L) {
                jjmatchedKind = 40;
                jjmatchedPos = 8;
            }
            break;
        case 84:
            if ((active0 & 0x2000L) != 0L) {
                jjmatchedKind = 13;
                jjmatchedPos = 8;
            }
            break;
        case 104:
            return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
        case 108:
            if ((active0 & 0x10000000000L) != 0L) {
                jjmatchedKind = 40;
                jjmatchedPos = 8;
            }
            break;
        case 116:
            if ((active0 & 0x2000L) != 0L) {
                jjmatchedKind = 13;
                jjmatchedPos = 8;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 8);
    }

    private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 8);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 8);
        }
        switch (curChar) {
        case 69:
            return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
        case 101:
            return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
        default:
            break;
        }
        return jjMoveNfa_0(0, 9);
    }

    private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjMoveNfa_0(0, 9);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return jjMoveNfa_0(0, 9);
        }
        switch (curChar) {
        case 83:
            if ((active0 & 0x80000000L) != 0L) {
                jjmatchedKind = 31;
                jjmatchedPos = 10;
            }
            break;
        case 115:
            if ((active0 & 0x80000000L) != 0L) {
                jjmatchedKind = 31;
                jjmatchedPos = 10;
            }
            break;
        default:
            break;
        }
        return jjMoveNfa_0(0, 10);
    }

    static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec1 = { 0xfffe7000fffffff6L, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0x5e00000000ffffffL };
    static final long[] jjbitVec3 = { 0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec4 = { 0x0L, 0xbfff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec5 = { 0x3000L, 0xffff000000000000L, 0xffffffffffffffffL, 0xffffffffffffffffL };
    static final long[] jjbitVec6 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L };
    static final long[] jjbitVec7 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffL };
    static final long[] jjbitVec8 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec9 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0xffff00000000ffffL };
    static final long[] jjbitVec10 = { 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL,
            0x3fffffffffffffffL };
    static final long[] jjbitVec11 = { 0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL };
    static final long[] jjbitVec12 = { 0xffffffffffffffffL, 0xbfffffffffffffffL, 0xffffffffffffffffL,
            0xffffffffffffffffL };
    static final long[] jjbitVec13 = { 0x8000000000003000L, 0xffff000000000001L, 0xffffffffffffffffL,
            0xffffffffffffffffL };

    private int jjMoveNfa_0(int startState, int curPos) {
        int strKind = jjmatchedKind;
        int strPos = jjmatchedPos;
        int seenUpto;
        input_stream.backup(seenUpto = curPos + 1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            throw new Error("Internal Error");
        }
        curPos = 0;
        int startsAt = 0;
        jjnewStateCnt = 154;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x3ff200000000000L & l) != 0L) {
                            if (kind > 78)
                                kind = 78;
                        } else if ((0x100002600L & l) != 0L) {
                            if (kind > 73)
                                kind = 73;
                        } else if (curChar == 43) {
                            jjCheckNAddStates(0, 4);
                        } else if (curChar == 46) {
                            jjCheckNAddTwoStates(103, 104);
                        } else if (curChar == 58) {
                            if (kind > 51)
                                kind = 51;
                            {
                                jjCheckNAdd(81);
                            }
                        } else if (curChar == 40) {
                            jjCheckNAdd(59);
                        } else if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 54;
                        else if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 43;
                        else if (curChar == 36)
                            jjstateSet[jjnewStateCnt++] = 15;
                        else if (curChar == 60) {
                            jjCheckNAddTwoStates(4, 5);
                        } else if (curChar == 35) {
                            if (kind > 49)
                                kind = 49;
                            {
                                jjCheckNAddTwoStates(1, 2);
                            }
                        } else if (curChar == 63)
                            jjstateSet[jjnewStateCnt++] = 12;
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 57)
                                kind = 57;
                            {
                                jjCheckNAddStates(5, 11);
                            }
                        } else if (curChar == 45) {
                            jjCheckNAddStates(12, 16);
                        } else if (curChar == 34) {
                            jjCheckNAddStates(17, 19);
                        } else if (curChar == 39) {
                            jjCheckNAddStates(20, 22);
                        }
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 81)
                                kind = 81;
                            {
                                jjCheckNAddTwoStates(71, 73);
                            }
                        }
                        if ((0x3ff000000000000L & l) != 0L) {
                            if (kind > 80)
                                kind = 80;
                            {
                                jjCheckNAddTwoStates(68, 69);
                            }
                        }
                        break;
                    case 1:
                        if ((0xffffffffffffdbffL & l) == 0L)
                            break;
                        if (kind > 49)
                            kind = 49;
                        {
                            jjCheckNAddTwoStates(1, 2);
                        }
                        break;
                    case 2:
                        if ((0x2400L & l) != 0L && kind > 49)
                            kind = 49;
                        break;
                    case 3:
                        if (curChar == 60) {
                            jjCheckNAddTwoStates(4, 5);
                        }
                        break;
                    case 4:
                        if ((0xaffffffa00000000L & l) != 0L) {
                            jjCheckNAddTwoStates(4, 5);
                        }
                        break;
                    case 5:
                        if (curChar == 62 && kind > 50)
                            kind = 50;
                        break;
                    case 6:
                        if (curChar == 58)
                            jjstateSet[jjnewStateCnt++] = 7;
                        break;
                    case 7:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 53)
                            kind = 53;
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 8:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 9:
                        if ((0x3ff200000000000L & l) != 0L && kind > 53)
                            kind = 53;
                        break;
                    case 11:
                        if (curChar == 63)
                            jjstateSet[jjnewStateCnt++] = 12;
                        break;
                    case 12:
                    case 13:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 54)
                            kind = 54;
                        {
                            jjCheckNAdd(13);
                        }
                        break;
                    case 14:
                        if (curChar == 36)
                            jjstateSet[jjnewStateCnt++] = 15;
                        break;
                    case 15:
                    case 16:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 55)
                            kind = 55;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                    case 19:
                        if (curChar == 45) {
                            jjCheckNAdd(20);
                        }
                        break;
                    case 20:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 56)
                            kind = 56;
                        {
                            jjCheckNAddTwoStates(19, 20);
                        }
                        break;
                    case 22:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(23);
                        }
                        break;
                    case 23:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 66)
                            kind = 66;
                        {
                            jjCheckNAdd(23);
                        }
                        break;
                    case 24:
                        if (curChar == 39) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 25:
                        if ((0xffffff7fffffdbffL & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 27:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 28:
                        if (curChar == 39 && kind > 67)
                            kind = 67;
                        break;
                    case 29:
                        if (curChar == 34) {
                            jjCheckNAddStates(17, 19);
                        }
                        break;
                    case 30:
                        if ((0xfffffffbffffdbffL & l) != 0L) {
                            jjCheckNAddStates(17, 19);
                        }
                        break;
                    case 32:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(17, 19);
                        }
                        break;
                    case 33:
                        if (curChar == 34 && kind > 68)
                            kind = 68;
                        break;
                    case 34:
                    case 36:
                        if (curChar == 39) {
                            jjCheckNAddStates(23, 26);
                        }
                        break;
                    case 35:
                    case 40:
                        if (curChar == 39) {
                            jjCheckNAddTwoStates(36, 37);
                        }
                        break;
                    case 38:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(23, 26);
                        }
                        break;
                    case 39:
                        if (curChar == 39) {
                            jjAddStates(27, 28);
                        }
                        break;
                    case 41:
                        if (curChar == 39 && kind > 69)
                            kind = 69;
                        break;
                    case 42:
                        if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 41;
                        break;
                    case 43:
                        if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 34;
                        break;
                    case 44:
                        if (curChar == 39)
                            jjstateSet[jjnewStateCnt++] = 43;
                        break;
                    case 45:
                    case 47:
                        if (curChar == 34) {
                            jjCheckNAddStates(29, 32);
                        }
                        break;
                    case 46:
                    case 51:
                        if (curChar == 34) {
                            jjCheckNAddTwoStates(47, 48);
                        }
                        break;
                    case 49:
                        if ((0x8400000000L & l) != 0L) {
                            jjCheckNAddStates(29, 32);
                        }
                        break;
                    case 50:
                        if (curChar == 34) {
                            jjAddStates(33, 34);
                        }
                        break;
                    case 52:
                        if (curChar == 34 && kind > 70)
                            kind = 70;
                        break;
                    case 53:
                        if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 52;
                        break;
                    case 54:
                        if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 45;
                        break;
                    case 55:
                        if (curChar == 34)
                            jjstateSet[jjnewStateCnt++] = 54;
                        break;
                    case 57:
                        if ((0x8400000000L & l) != 0L && kind > 71)
                            kind = 71;
                        break;
                    case 58:
                        if (curChar == 40) {
                            jjCheckNAdd(59);
                        }
                        break;
                    case 59:
                        if ((0x100002600L & l) != 0L) {
                            jjCheckNAddTwoStates(59, 60);
                        }
                        break;
                    case 60:
                        if (curChar == 41 && kind > 72)
                            kind = 72;
                        break;
                    case 61:
                        if ((0x100002600L & l) != 0L && kind > 73)
                            kind = 73;
                        break;
                    case 63:
                        if ((0x100002600L & l) != 0L) {
                            jjAddStates(35, 36);
                        }
                        break;
                    case 66:
                        if ((0x3ff200000000000L & l) != 0L && kind > 78)
                            kind = 78;
                        break;
                    case 67:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 80)
                            kind = 80;
                        {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 68:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 69:
                        if ((0x3ff200000000000L & l) != 0L && kind > 80)
                            kind = 80;
                        break;
                    case 70:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddTwoStates(71, 73);
                        }
                        break;
                    case 72:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddTwoStates(71, 72);
                        }
                        break;
                    case 73:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddStates(37, 39);
                        }
                        break;
                    case 75:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjAddStates(40, 41);
                        }
                        break;
                    case 76:
                        if ((0x3ff200000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 77;
                        break;
                    case 77:
                        if (curChar == 58 && kind > 51)
                            kind = 51;
                        break;
                    case 78:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjAddStates(42, 43);
                        }
                        break;
                    case 79:
                        if ((0x3ff200000000000L & l) != 0L)
                            jjstateSet[jjnewStateCnt++] = 80;
                        break;
                    case 80:
                        if (curChar == 58) {
                            jjCheckNAdd(81);
                        }
                        break;
                    case 81:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 52)
                            kind = 52;
                        {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 82:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 83:
                        if ((0x3ff200000000000L & l) != 0L && kind > 52)
                            kind = 52;
                        break;
                    case 84:
                        if ((0x3ff600000000000L & l) != 0L) {
                            jjAddStates(44, 45);
                        }
                        break;
                    case 85:
                        if ((0x3ff200000000000L & l) != 0L && kind > 79)
                            kind = 79;
                        break;
                    case 86:
                        if (curChar != 58)
                            break;
                        if (kind > 51)
                            kind = 51;
                        {
                            jjCheckNAdd(81);
                        }
                        break;
                    case 87:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 57)
                            kind = 57;
                        {
                            jjCheckNAddStates(5, 11);
                        }
                        break;
                    case 88:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 57)
                            kind = 57;
                        {
                            jjCheckNAdd(88);
                        }
                        break;
                    case 89:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(89, 90);
                        }
                        break;
                    case 90:
                        if (curChar != 46)
                            break;
                        if (kind > 58)
                            kind = 58;
                        {
                            jjCheckNAdd(91);
                        }
                        break;
                    case 91:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 58)
                            kind = 58;
                        {
                            jjCheckNAdd(91);
                        }
                        break;
                    case 92:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(92, 93);
                        }
                        break;
                    case 93:
                        if (curChar == 46) {
                            jjCheckNAddTwoStates(94, 95);
                        }
                        break;
                    case 94:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(94, 95);
                        }
                        break;
                    case 96:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(97);
                        }
                        break;
                    case 97:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 59)
                            kind = 59;
                        {
                            jjCheckNAdd(97);
                        }
                        break;
                    case 98:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(98, 99);
                        }
                        break;
                    case 100:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(101);
                        }
                        break;
                    case 101:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 59)
                            kind = 59;
                        {
                            jjCheckNAdd(101);
                        }
                        break;
                    case 102:
                        if (curChar == 46) {
                            jjCheckNAddTwoStates(103, 104);
                        }
                        break;
                    case 103:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 58)
                            kind = 58;
                        {
                            jjCheckNAdd(103);
                        }
                        break;
                    case 104:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(104, 105);
                        }
                        break;
                    case 106:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(107);
                        }
                        break;
                    case 107:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 59)
                            kind = 59;
                        {
                            jjCheckNAdd(107);
                        }
                        break;
                    case 108:
                        if (curChar == 43) {
                            jjCheckNAddStates(0, 4);
                        }
                        break;
                    case 109:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 60)
                            kind = 60;
                        {
                            jjCheckNAdd(109);
                        }
                        break;
                    case 110:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(110, 111);
                        }
                        break;
                    case 111:
                        if (curChar != 46)
                            break;
                        if (kind > 61)
                            kind = 61;
                        {
                            jjCheckNAdd(112);
                        }
                        break;
                    case 112:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 61)
                            kind = 61;
                        {
                            jjCheckNAdd(112);
                        }
                        break;
                    case 113:
                        if (curChar == 46) {
                            jjCheckNAdd(114);
                        }
                        break;
                    case 114:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 61)
                            kind = 61;
                        {
                            jjCheckNAdd(114);
                        }
                        break;
                    case 115:
                        if (curChar == 46) {
                            jjCheckNAdd(116);
                        }
                        break;
                    case 116:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(116, 117);
                        }
                        break;
                    case 118:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(119);
                        }
                        break;
                    case 119:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 62)
                            kind = 62;
                        {
                            jjCheckNAdd(119);
                        }
                        break;
                    case 120:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(46, 49);
                        }
                        break;
                    case 121:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(121, 122);
                        }
                        break;
                    case 122:
                        if (curChar == 46) {
                            jjCheckNAddTwoStates(123, 124);
                        }
                        break;
                    case 123:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(123, 124);
                        }
                        break;
                    case 125:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(126);
                        }
                        break;
                    case 126:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 62)
                            kind = 62;
                        {
                            jjCheckNAdd(126);
                        }
                        break;
                    case 127:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(127, 128);
                        }
                        break;
                    case 129:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(130);
                        }
                        break;
                    case 130:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 62)
                            kind = 62;
                        {
                            jjCheckNAdd(130);
                        }
                        break;
                    case 131:
                        if (curChar == 45) {
                            jjCheckNAddStates(12, 16);
                        }
                        break;
                    case 132:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 63)
                            kind = 63;
                        {
                            jjCheckNAdd(132);
                        }
                        break;
                    case 133:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(133, 134);
                        }
                        break;
                    case 134:
                        if (curChar != 46)
                            break;
                        if (kind > 64)
                            kind = 64;
                        {
                            jjCheckNAdd(135);
                        }
                        break;
                    case 135:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 64)
                            kind = 64;
                        {
                            jjCheckNAdd(135);
                        }
                        break;
                    case 136:
                        if (curChar == 46) {
                            jjCheckNAdd(137);
                        }
                        break;
                    case 137:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 64)
                            kind = 64;
                        {
                            jjCheckNAdd(137);
                        }
                        break;
                    case 138:
                        if (curChar == 46) {
                            jjCheckNAdd(139);
                        }
                        break;
                    case 139:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(139, 140);
                        }
                        break;
                    case 141:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(142);
                        }
                        break;
                    case 142:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 65)
                            kind = 65;
                        {
                            jjCheckNAdd(142);
                        }
                        break;
                    case 143:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddStates(50, 53);
                        }
                        break;
                    case 144:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(144, 145);
                        }
                        break;
                    case 145:
                        if (curChar == 46) {
                            jjCheckNAddTwoStates(146, 147);
                        }
                        break;
                    case 146:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(146, 147);
                        }
                        break;
                    case 148:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(149);
                        }
                        break;
                    case 149:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 65)
                            kind = 65;
                        {
                            jjCheckNAdd(149);
                        }
                        break;
                    case 150:
                        if ((0x3ff000000000000L & l) != 0L) {
                            jjCheckNAddTwoStates(150, 151);
                        }
                        break;
                    case 152:
                        if ((0x280000000000L & l) != 0L) {
                            jjCheckNAdd(153);
                        }
                        break;
                    case 153:
                        if ((0x3ff000000000000L & l) == 0L)
                            break;
                        if (kind > 65)
                            kind = 65;
                        {
                            jjCheckNAdd(153);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 80)
                                kind = 80;
                            {
                                jjCheckNAddTwoStates(68, 69);
                            }
                        } else if (curChar == 91) {
                            jjAddStates(35, 36);
                        } else if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 57;
                        else if (curChar == 64) {
                            jjCheckNAdd(18);
                        }
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 78)
                                kind = 78;
                        }
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            if (kind > 76)
                                kind = 76;
                        }
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            if (kind > 75)
                                kind = 75;
                            {
                                jjCheckNAddStates(54, 61);
                            }
                        } else if (curChar == 95)
                            jjstateSet[jjnewStateCnt++] = 6;
                        if ((0x7fffffe07fffffeL & l) != 0L) {
                            if (kind > 81)
                                kind = 81;
                            {
                                jjCheckNAddTwoStates(71, 73);
                            }
                        }
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(62, 63);
                        }
                        break;
                    case 1:
                        if (kind > 49)
                            kind = 49;
                        {
                            jjAddStates(64, 65);
                        }
                        break;
                    case 4:
                        if ((0xc7fffffeafffffffL & l) != 0L) {
                            jjAddStates(66, 67);
                        }
                        break;
                    case 7:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 53)
                            kind = 53;
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 8:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 9:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 53)
                            kind = 53;
                        break;
                    case 10:
                        if (curChar == 95)
                            jjstateSet[jjnewStateCnt++] = 6;
                        break;
                    case 12:
                    case 13:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 54)
                            kind = 54;
                        {
                            jjCheckNAdd(13);
                        }
                        break;
                    case 15:
                    case 16:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 55)
                            kind = 55;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                    case 17:
                        if (curChar == 64) {
                            jjCheckNAdd(18);
                        }
                        break;
                    case 18:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 56)
                            kind = 56;
                        {
                            jjCheckNAddTwoStates(18, 19);
                        }
                        break;
                    case 20:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 56)
                            kind = 56;
                        {
                            jjCheckNAddTwoStates(19, 20);
                        }
                        break;
                    case 21:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(62, 63);
                        }
                        break;
                    case 25:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 26:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 27;
                        break;
                    case 27:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(20, 22);
                        }
                        break;
                    case 30:
                        if ((0xffffffffefffffffL & l) != 0L) {
                            jjCheckNAddStates(17, 19);
                        }
                        break;
                    case 31:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 32;
                        break;
                    case 32:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(17, 19);
                        }
                        break;
                    case 36:
                        if ((0x50000000L & l) != 0L) {
                            jjCheckNAddStates(23, 26);
                        }
                        break;
                    case 37:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 38;
                        break;
                    case 38:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(23, 26);
                        }
                        break;
                    case 47:
                        if ((0x50000000L & l) != 0L) {
                            jjCheckNAddStates(29, 32);
                        }
                        break;
                    case 48:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 49;
                        break;
                    case 49:
                        if ((0x14404410000000L & l) != 0L) {
                            jjCheckNAddStates(29, 32);
                        }
                        break;
                    case 56:
                        if (curChar == 92)
                            jjstateSet[jjnewStateCnt++] = 57;
                        break;
                    case 57:
                        if ((0x14404410000000L & l) != 0L && kind > 71)
                            kind = 71;
                        break;
                    case 62:
                        if (curChar == 91) {
                            jjAddStates(35, 36);
                        }
                        break;
                    case 64:
                        if (curChar == 93 && kind > 74)
                            kind = 74;
                        break;
                    case 65:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 76)
                            kind = 76;
                        break;
                    case 66:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 78)
                            kind = 78;
                        break;
                    case 67:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 80)
                            kind = 80;
                        {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 68:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 69:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 80)
                            kind = 80;
                        break;
                    case 70:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddTwoStates(71, 73);
                        }
                        break;
                    case 71:
                        if (curChar == 95) {
                            jjCheckNAdd(72);
                        }
                        break;
                    case 72:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddTwoStates(71, 72);
                        }
                        break;
                    case 73:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 81)
                            kind = 81;
                        {
                            jjCheckNAddStates(37, 39);
                        }
                        break;
                    case 74:
                        if ((0x7fffffe07fffffeL & l) == 0L)
                            break;
                        if (kind > 75)
                            kind = 75;
                        {
                            jjCheckNAddStates(54, 61);
                        }
                        break;
                    case 75:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(75, 76);
                        }
                        break;
                    case 76:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAdd(77);
                        }
                        break;
                    case 78:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(78, 79);
                        }
                        break;
                    case 79:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAdd(80);
                        }
                        break;
                    case 81:
                        if ((0x7fffffe87fffffeL & l) == 0L)
                            break;
                        if (kind > 52)
                            kind = 52;
                        {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 82:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 83:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 52)
                            kind = 52;
                        break;
                    case 84:
                        if ((0x7fffffe87fffffeL & l) != 0L) {
                            jjCheckNAddTwoStates(84, 85);
                        }
                        break;
                    case 85:
                        if ((0x7fffffe87fffffeL & l) != 0L && kind > 79)
                            kind = 79;
                        break;
                    case 95:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(68, 69);
                        }
                        break;
                    case 99:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(70, 71);
                        }
                        break;
                    case 105:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(72, 73);
                        }
                        break;
                    case 117:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(74, 75);
                        }
                        break;
                    case 124:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(76, 77);
                        }
                        break;
                    case 128:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(78, 79);
                        }
                        break;
                    case 140:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(80, 81);
                        }
                        break;
                    case 147:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(82, 83);
                        }
                        break;
                    case 151:
                        if ((0x2000000020L & l) != 0L) {
                            jjAddStates(84, 85);
                        }
                        break;
                    default:
                        break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                    case 0:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            if (kind > 76)
                                kind = 76;
                        }
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            if (kind > 78)
                                kind = 78;
                        }
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            if (kind > 80)
                                kind = 80;
                            {
                                jjCheckNAddTwoStates(68, 69);
                            }
                        }
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {
                            if (kind > 75)
                                kind = 75;
                            {
                                jjCheckNAddStates(54, 61);
                            }
                        }
                        break;
                    case 1:
                        if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 49)
                            kind = 49;
                        {
                            jjAddStates(64, 65);
                        }
                        break;
                    case 4:
                        if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(66, 67);
                        }
                        break;
                    case 7:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 53)
                            kind = 53;
                        {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 8:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(8, 9);
                        }
                        break;
                    case 9:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 53)
                            kind = 53;
                        break;
                    case 12:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 54)
                            kind = 54;
                        {
                            jjCheckNAdd(13);
                        }
                        break;
                    case 13:
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 54)
                            kind = 54;
                        {
                            jjCheckNAdd(13);
                        }
                        break;
                    case 15:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 55)
                            kind = 55;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                    case 16:
                        if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 55)
                            kind = 55;
                        {
                            jjCheckNAdd(16);
                        }
                        break;
                    case 25:
                        if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(20, 22);
                        }
                        break;
                    case 30:
                        if (jjCanMove_3(hiByte, i1, i2, l1, l2)) {
                            jjAddStates(17, 19);
                        }
                        break;
                    case 65:
                        if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 76)
                            kind = 76;
                        break;
                    case 66:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 78)
                            kind = 78;
                        break;
                    case 67:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 80)
                            kind = 80;
                        {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 68:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(68, 69);
                        }
                        break;
                    case 69:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 80)
                            kind = 80;
                        break;
                    case 74:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 75)
                            kind = 75;
                        {
                            jjCheckNAddStates(54, 61);
                        }
                        break;
                    case 75:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(75, 76);
                        }
                        break;
                    case 76:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAdd(77);
                        }
                        break;
                    case 78:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(78, 79);
                        }
                        break;
                    case 79:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAdd(80);
                        }
                        break;
                    case 81:
                        if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                            break;
                        if (kind > 52)
                            kind = 52;
                        {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 82:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(82, 83);
                        }
                        break;
                    case 83:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 52)
                            kind = 52;
                        break;
                    case 84:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2)) {
                            jjCheckNAddTwoStates(84, 85);
                        }
                        break;
                    case 85:
                        if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 79)
                            kind = 79;
                        break;
                    default:
                        if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0)
                            break;
                        else
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 154 - (jjnewStateCnt = startsAt)))
                break;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                break;
            }
        }
        if (jjmatchedPos > strPos)
            return curPos;

        int toRet = Math.max(curPos, seenUpto);

        if (curPos < toRet)
            for (i = toRet - Math.min(curPos, seenUpto); i-- > 0;)
                try {
                    curChar = input_stream.readChar();
                } catch (java.io.IOException e) {
                    throw new Error("Internal Error : Please send a bug report.");
                }

        if (jjmatchedPos < strPos) {
            jjmatchedKind = strKind;
            jjmatchedPos = strPos;
        } else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
            jjmatchedKind = strKind;

        return toRet;
    }

    static final int[] jjnextStates = { 109, 110, 113, 115, 120, 88, 89, 90, 92, 93, 98, 99, 132, 133, 136, 138, 143,
            30, 31, 33, 25, 26, 28, 35, 36, 37, 39, 40, 42, 46, 47, 48, 50, 51, 53, 63, 64, 71, 72, 73, 75, 76, 78, 79,
            84, 85, 121, 122, 127, 128, 144, 145, 150, 151, 75, 76, 77, 78, 79, 80, 84, 85, 22, 23, 1, 2, 4, 5, 96, 97,
            100, 101, 106, 107, 118, 119, 125, 126, 129, 130, 141, 142, 148, 149, 152, 153, };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec0[i2] & l2) != 0L);
        default:
            return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec3[i2] & l2) != 0L);
        case 3:
            return ((jjbitVec4[i2] & l2) != 0L);
        case 32:
            return ((jjbitVec5[i2] & l2) != 0L);
        case 33:
            return ((jjbitVec6[i2] & l2) != 0L);
        case 47:
            return ((jjbitVec7[i2] & l2) != 0L);
        case 48:
            return ((jjbitVec8[i2] & l2) != 0L);
        case 253:
            return ((jjbitVec9[i2] & l2) != 0L);
        case 255:
            return ((jjbitVec10[i2] & l2) != 0L);
        default:
            if ((jjbitVec1[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec11[i2] & l2) != 0L);
        case 3:
            return ((jjbitVec12[i2] & l2) != 0L);
        case 32:
            return ((jjbitVec13[i2] & l2) != 0L);
        case 33:
            return ((jjbitVec6[i2] & l2) != 0L);
        case 47:
            return ((jjbitVec7[i2] & l2) != 0L);
        case 48:
            return ((jjbitVec8[i2] & l2) != 0L);
        case 253:
            return ((jjbitVec9[i2] & l2) != 0L);
        case 255:
            return ((jjbitVec10[i2] & l2) != 0L);
        default:
            if ((jjbitVec1[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
        case 0:
            return ((jjbitVec0[i2] & l2) != 0L);
        default:
            if ((jjbitVec8[i1] & l1) != 0L)
                return true;
            return false;
        }
    }

    /** Token literal values. */
    public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, "\141", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
            "\52", "\173", "\56", "\175", "\50", "\54", "\51", "\73", "\133", "\135", "\174\174", "\46\46", "\75",
            "\41\75", "\74", "\76", "\74\75", "\76\75", "\53", "\55", "\57", "\41", "\136\136", };

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /** Get the next Token. */
    public Token getNextToken() {
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop: for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                jjmatchedPos = -1;
                matchedToken = jjFillToken();
                matchedToken.specialToken = specialToken;
                return matchedToken;
            }

            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                } else {
                    if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        if (specialToken == null)
                            specialToken = matchedToken;
                        else {
                            matchedToken.specialToken = specialToken;
                            specialToken = (specialToken.next = matchedToken);
                        }
                    }
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                    TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream) {

        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

        input_stream = stream;
    }

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 154; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /** Reinitialise parser. */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /** Switch to specified lex state. */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    /** Lexer state names. */
    public static final String[] lexStateNames = { "DEFAULT", };
    static final long[] jjtoToken = { 0xfffdfffffffffc01L, 0x1ffffffdfffL, };
    static final long[] jjtoSkip = { 0x20000000003feL, 0x0L, };
    static final long[] jjtoSpecial = { 0x2000000000000L, 0x0L, };
    protected SimpleCharStream input_stream;

    private final int[] jjrounds = new int[154];
    private final int[] jjstateSet = new int[2 * 154];

    protected char curChar;
}
