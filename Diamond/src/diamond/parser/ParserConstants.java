/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package diamond.parser;

/**
 * Token literal values and constants. Generated by
 * org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int BASE = 10;
    /** RegularExpression Id. */
    int PREFIX = 11;
    /** RegularExpression Id. */
    int SELECT = 12;
    /** RegularExpression Id. */
    int CONSTRUCT = 13;
    /** RegularExpression Id. */
    int DESCRIBE = 14;
    /** RegularExpression Id. */
    int ASK = 15;
    /** RegularExpression Id. */
    int ORDER = 16;
    /** RegularExpression Id. */
    int BY = 17;
    /** RegularExpression Id. */
    int LIMIT = 18;
    /** RegularExpression Id. */
    int OFFSET = 19;
    /** RegularExpression Id. */
    int DISTINCT = 20;
    /** RegularExpression Id. */
    int REDUCED = 21;
    /** RegularExpression Id. */
    int FROM = 22;
    /** RegularExpression Id. */
    int NAMED = 23;
    /** RegularExpression Id. */
    int WHERE = 24;
    /** RegularExpression Id. */
    int GRAPH = 25;
    /** RegularExpression Id. */
    int OPTIONAL = 26;
    /** RegularExpression Id. */
    int UNION = 27;
    /** RegularExpression Id. */
    int FILTER = 28;
    /** RegularExpression Id. */
    int STR = 29;
    /** RegularExpression Id. */
    int LANG = 30;
    /** RegularExpression Id. */
    int LANGMATCHES = 31;
    /** RegularExpression Id. */
    int DATATYPE = 32;
    /** RegularExpression Id. */
    int BOUND = 33;
    /** RegularExpression Id. */
    int SAME_TERM = 34;
    /** RegularExpression Id. */
    int ASC = 35;
    /** RegularExpression Id. */
    int DESC = 36;
    /** RegularExpression Id. */
    int IS_URI = 37;
    /** RegularExpression Id. */
    int IS_IRI = 38;
    /** RegularExpression Id. */
    int IS_BLANK = 39;
    /** RegularExpression Id. */
    int IS_LITERAL = 40;
    /** RegularExpression Id. */
    int REGEX = 41;
    /** RegularExpression Id. */
    int TRUE = 42;
    /** RegularExpression Id. */
    int FALSE = 43;
    /** RegularExpression Id. */
    int INSERT = 44;
    /** RegularExpression Id. */
    int DELETE = 45;
    /** RegularExpression Id. */
    int BIND = 46;
    /** RegularExpression Id. */
    int AS = 47;
    /** RegularExpression Id. */
    int TYPE_A = 48;
    /** RegularExpression Id. */
    int COMMENT = 49;
    /** RegularExpression Id. */
    int IRI_REF = 50;
    /** RegularExpression Id. */
    int PNAME_NS = 51;
    /** RegularExpression Id. */
    int PNAME_LN = 52;
    /** RegularExpression Id. */
    int BLANK_NODE_LABEL = 53;
    /** RegularExpression Id. */
    int VAR1 = 54;
    /** RegularExpression Id. */
    int VAR2 = 55;
    /** RegularExpression Id. */
    int LANGTAG = 56;
    /** RegularExpression Id. */
    int INTEGER = 57;
    /** RegularExpression Id. */
    int DECIMAL = 58;
    /** RegularExpression Id. */
    int DOUBLE = 59;
    /** RegularExpression Id. */
    int INTEGER_POSITIVE = 60;
    /** RegularExpression Id. */
    int DECIMAL_POSITIVE = 61;
    /** RegularExpression Id. */
    int DOUBLE_POSITIVE = 62;
    /** RegularExpression Id. */
    int INTEGER_NEGATIVE = 63;
    /** RegularExpression Id. */
    int DECIMAL_NEGATIVE = 64;
    /** RegularExpression Id. */
    int DOUBLE_NEGATIVE = 65;
    /** RegularExpression Id. */
    int EXPONENT = 66;
    /** RegularExpression Id. */
    int STRING_LITERAL1 = 67;
    /** RegularExpression Id. */
    int STRING_LITERAL2 = 68;
    /** RegularExpression Id. */
    int STRING_LITERAL_LONG1 = 69;
    /** RegularExpression Id. */
    int STRING_LITERAL_LONG2 = 70;
    /** RegularExpression Id. */
    int ECHAR = 71;
    /** RegularExpression Id. */
    int NIL = 72;
    /** RegularExpression Id. */
    int WS = 73;
    /** RegularExpression Id. */
    int ANON = 74;
    /** RegularExpression Id. */
    int PN_CHARS_BASE = 75;
    /** RegularExpression Id. */
    int PN_CHARS_U = 76;
    /** RegularExpression Id. */
    int VARNAME = 77;
    /** RegularExpression Id. */
    int PN_CHARS = 78;
    /** RegularExpression Id. */
    int PN_PREFIX = 79;
    /** RegularExpression Id. */
    int PN_LOCAL = 80;
    /** RegularExpression Id. */
    int PUTATIVE_LITERAL = 81;

    /** Lexical state. */
    int DEFAULT = 0;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>", "\"\\t\"", "\"\\n\"", "\"\\r\"", "\"\\b\"", "\"\\f\"", "\"\\\"\"", "\"\\\'\"",
            "\"\\\\\"", "\" \"", "\"base\"", "\"prefix\"", "\"select\"", "\"construct\"", "\"describe\"", "\"ask\"",
            "\"order\"", "\"by\"", "\"limit\"", "\"offset\"", "\"distinct\"", "\"reduced\"", "\"from\"", "\"named\"",
            "\"where\"", "\"graph\"", "\"optional\"", "\"union\"", "\"filter\"", "\"str\"", "\"lang\"",
            "\"langmatches\"", "\"datatype\"", "\"bound\"", "\"sameTERM\"", "\"asc\"", "\"desc\"", "\"isURI\"",
            "\"isIRI\"", "\"isBLANK\"", "\"isLITERAL\"", "\"regex\"", "\"true\"", "\"false\"", "\"insert\"",
            "\"delete\"", "\"bind\"", "\"as\"", "\"a\"", "<COMMENT>", "<IRI_REF>", "<PNAME_NS>", "<PNAME_LN>",
            "<BLANK_NODE_LABEL>", "<VAR1>", "<VAR2>", "<LANGTAG>", "<INTEGER>", "<DECIMAL>", "<DOUBLE>",
            "<INTEGER_POSITIVE>", "<DECIMAL_POSITIVE>", "<DOUBLE_POSITIVE>", "<INTEGER_NEGATIVE>",
            "<DECIMAL_NEGATIVE>", "<DOUBLE_NEGATIVE>", "<EXPONENT>", "<STRING_LITERAL1>", "<STRING_LITERAL2>",
            "<STRING_LITERAL_LONG1>", "<STRING_LITERAL_LONG2>", "<ECHAR>", "<NIL>", "<WS>", "<ANON>",
            "<PN_CHARS_BASE>", "<PN_CHARS_U>", "<VARNAME>", "<PN_CHARS>", "<PN_PREFIX>", "<PN_LOCAL>",
            "<PUTATIVE_LITERAL>", "\"*\"", "\"{\"", "\".\"", "\"}\"", "\"(\"", "\",\"", "\")\"", "\";\"", "\"[\"",
            "\"]\"", "\"||\"", "\"&&\"", "\"=\"", "\"!=\"", "\"<\"", "\">\"", "\"<=\"", "\">=\"", "\"+\"", "\"-\"",
            "\"/\"", "\"!\"", "\"^^\"", };

}
