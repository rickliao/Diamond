//
// Generated by JTB 1.3.2
//

package diamond.parser.syntaxtree;

/**
 * Grammar production: nodeToken -> "{" nodeOptional -> ( TriplesBlock() )?
 * nodeListOptional -> ( GraphPatternNotTriples() ( "." )? ( TriplesBlock() )?
 * )* nodeToken1 -> "}"
 */
@SuppressWarnings("serial")
public class GroupGraphPattern implements Node {

    public NodeToken nodeToken;
    public NodeOptional nodeOptional;
    public NodeListOptional nodeListOptional;
    public NodeToken nodeToken1;

    public GroupGraphPattern(NodeToken n0, NodeOptional n1, NodeListOptional n2, NodeToken n3) {
        nodeToken = n0;
        nodeOptional = n1;
        nodeListOptional = n2;
        nodeToken1 = n3;
    }

    public GroupGraphPattern(NodeOptional n0, NodeListOptional n1) {
        nodeToken = new NodeToken("{");
        nodeOptional = n0;
        nodeListOptional = n1;
        nodeToken1 = new NodeToken("}");
    }

    @Override
    public void accept(diamond.parser.visitor.Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(diamond.parser.visitor.GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(diamond.parser.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(diamond.parser.visitor.GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}
