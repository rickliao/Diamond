//
// Generated by JTB 1.3.2
//

package diamond.parser.syntaxtree;

/**
 * Grammar production: nodeToken -> <BIND> nodeToken1 -> "(" expression ->
 * Expression() nodeToken2 -> <AS> var -> Var() nodeToken3 -> ")"
 */
@SuppressWarnings("serial")
public class Bind implements Node {

    public NodeToken nodeToken;
    public NodeToken nodeToken1;
    public Expression expression;
    public NodeToken nodeToken2;
    public Var var;
    public NodeToken nodeToken3;

    public Bind(NodeToken n0, NodeToken n1, Expression n2, NodeToken n3, Var n4, NodeToken n5) {
        nodeToken = n0;
        nodeToken1 = n1;
        expression = n2;
        nodeToken2 = n3;
        var = n4;
        nodeToken3 = n5;
    }

    public Bind(Expression n0, Var n1) {
        nodeToken = new NodeToken("bind");
        nodeToken1 = new NodeToken("(");
        expression = n0;
        nodeToken2 = new NodeToken("as");
        var = n1;
        nodeToken3 = new NodeToken(")");
    }

    @Override
    public void accept(diamond.parser.visitor.Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(diamond.parser.visitor.GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(diamond.parser.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(diamond.parser.visitor.GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}
