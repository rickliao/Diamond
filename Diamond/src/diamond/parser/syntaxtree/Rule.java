//
// Generated by JTB 1.3.2
//

package diamond.parser.syntaxtree;

/**
 * Grammar production: consequent -> Consequent() nodeToken -> <WHERE>
 * antecedent -> Antecedent()
 */
@SuppressWarnings("serial")
public class Rule implements Node {

    public Consequent consequent;
    public NodeToken nodeToken;
    public Antecedent antecedent;

    public Rule(Consequent n0, NodeToken n1, Antecedent n2) {
        consequent = n0;
        nodeToken = n1;
        antecedent = n2;
    }

    public Rule(Consequent n0, Antecedent n1) {
        consequent = n0;
        nodeToken = new NodeToken("where");
        antecedent = n1;
    }

    @Override
    public void accept(diamond.parser.visitor.Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(diamond.parser.visitor.GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(diamond.parser.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(diamond.parser.visitor.GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}
