//
// Generated by JTB 1.3.2
//

package diamond.parser.syntaxtree;

import java.util.*;

/**
 * Represents a sequence of nodes nested within a choice, list, optional list,
 * or optional, e.g. ( A B )+ or [ C D E ]
 */
@SuppressWarnings("serial")
public class NodeSequence implements NodeListInterface {

    public NodeSequence(int n) {
        nodes = new Vector<Node>(n);
    }

    public NodeSequence(Node firstNode) {
        nodes = new Vector<Node>();
        addNode(firstNode);
    }

    @Override
    public void addNode(Node n) {
        nodes.addElement(n);
    }

    @Override
    public Node elementAt(int i) {
        return nodes.elementAt(i);
    }

    @Override
    public Enumeration<Node> elements() {
        return nodes.elements();
    }

    @Override
    public int size() {
        return nodes.size();
    }

    @Override
    public void accept(diamond.parser.visitor.Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(diamond.parser.visitor.GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(diamond.parser.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(diamond.parser.visitor.GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }

    public Vector<Node> nodes;
}
