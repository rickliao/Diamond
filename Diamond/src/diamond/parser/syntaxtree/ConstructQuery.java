//
// Generated by JTB 1.3.2
//

package diamond.parser.syntaxtree;

/**
 * Grammar production: nodeToken -> <CONSTRUCT> constructTemplate ->
 * ConstructTemplate() nodeListOptional -> ( DatasetClause() )* whereClause ->
 * WhereClause() solutionModifier -> SolutionModifier()
 */
@SuppressWarnings("serial")
public class ConstructQuery implements Node {

    public NodeToken nodeToken;
    public ConstructTemplate constructTemplate;
    public NodeListOptional nodeListOptional;
    public WhereClause whereClause;
    public SolutionModifier solutionModifier;

    public ConstructQuery(NodeToken n0, ConstructTemplate n1, NodeListOptional n2, WhereClause n3, SolutionModifier n4) {
        nodeToken = n0;
        constructTemplate = n1;
        nodeListOptional = n2;
        whereClause = n3;
        solutionModifier = n4;
    }

    public ConstructQuery(ConstructTemplate n0, NodeListOptional n1, WhereClause n2, SolutionModifier n3) {
        nodeToken = new NodeToken("construct");
        constructTemplate = n0;
        nodeListOptional = n1;
        whereClause = n2;
        solutionModifier = n3;
    }

    @Override
    public void accept(diamond.parser.visitor.Visitor v) {
        v.visit(this);
    }

    @Override
    public <R, A> R accept(diamond.parser.visitor.GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    @Override
    public <R> R accept(diamond.parser.visitor.GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    @Override
    public <A> void accept(diamond.parser.visitor.GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}
