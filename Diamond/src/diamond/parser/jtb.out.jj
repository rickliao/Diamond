//
// Generated by JTB 1.3.2
//

options {
   STATIC = false;
}

PARSER_BEGIN(Parser)
package diamond.parser;

import diamond.parser.syntaxtree.*;
import java.util.Vector;


public class Parser 
{
   public static void main(String[] args) throws ParseException
   {
      Parser parser = new Parser(System.in);
      parser.Query();
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(Parser)

SKIP :
{
   "\t"
   | "\n"
   | "\r"
   | "\b"
   | "\f"
   | "\""
   | "\'"
   | "\\"
   | " "
}

TOKEN [IGNORE_CASE] :
{
   <BASE: "base">
   | <PREFIX: "prefix">
   | <SELECT: "select">
   | <CONSTRUCT: "construct">
   | <DESCRIBE: "describe">
   | <ASK: "ask">
   | <ORDER: "order">
   | <BY: "by">
   | <LIMIT: "limit">
   | <OFFSET: "offset">
   | <DISTINCT: "distinct">
   | <REDUCED: "reduced">
   | <FROM: "from">
   | <NAMED: "named">
   | <WHERE: "where">
   | <GRAPH: "graph">
   | <OPTIONAL: "optional">
   | <UNION: "union">
   | <FILTER: "filter">
   | <STR: "str">
   | <LANG: "lang">
   | <LANGMATCHES: "langmatches">
   | <DATATYPE: "datatype">
   | <BOUND: "bound">
   | <SAME_TERM: "sameTERM">
   | <ASC: "asc">
   | <DESC: "desc">
   | <IS_URI: "isURI">
   | <IS_IRI: "isIRI">
   | <IS_BLANK: "isBLANK">
   | <IS_LITERAL: "isLITERAL">
   | <REGEX: "regex">
   | <TRUE: "true">
   | <FALSE: "false">
   | <INSERT: "insert">
   | <DELETE: "delete">
   | <BIND: "bind">
   | <AS: "as">
}

TOKEN :
{
   <TYPE_A: "a">
}

SPECIAL_TOKEN :
{
   <COMMENT: "#" (~["\r", "\n"])* ("\r" | "\n" | ["\r", "\n"])?>
}

TOKEN :
{
   <IRI_REF: "<" (~["^", "<", ">", "\"", "{", "}", "|", "^", "`", "\\", "\u0000"-" "])* ">">
   | <PNAME_NS: (<PN_PREFIX>)? ":">
   | <PNAME_LN: <PNAME_NS> <PN_LOCAL>>
   | <BLANK_NODE_LABEL: "_:" <PN_LOCAL>>
   | <VAR1: "?" <VARNAME>>
   | <VAR2: "$" <VARNAME>>
   | <LANGTAG: "@" (["a"-"z", "A"-"Z"])+ ("-" (["a"-"z", "A"-"Z", "0"-"9"])+)*>
   | <INTEGER: (["0"-"9"])+>
   | <DECIMAL: (["0"-"9"])+ "." (["0"-"9"])* | "." (["0"-"9"])+>
   | <DOUBLE: (["0"-"9"])+ "." (["0"-"9"])* <EXPONENT> | "." (["0"-"9"])+ <EXPONENT> | (["0"-"9"])+ <EXPONENT>>
   | <INTEGER_POSITIVE: "+" <INTEGER>>
   | <DECIMAL_POSITIVE: "+" <DECIMAL>>
   | <DOUBLE_POSITIVE: "+" <DOUBLE>>
   | <INTEGER_NEGATIVE: "-" <INTEGER>>
   | <DECIMAL_NEGATIVE: "-" <DECIMAL>>
   | <DOUBLE_NEGATIVE: "-" <DOUBLE>>
   | <EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <STRING_LITERAL1: "'" ((~["'", "\\", "\n", "\r"]) | <ECHAR>)* "'">
   | <STRING_LITERAL2: "\"" ((~["\"", "\\", "\n", "\r"]) | <ECHAR>)* "\"">
   | <STRING_LITERAL_LONG1: "\'\'\'" (("\'" | "\'\'")? (["^", "\'", "\\"] | <ECHAR>))* "\'\'\'">
   | <STRING_LITERAL_LONG2: "\"\"\"" (("\"" | "\"\"")? (["^", "\"", "\\"] | <ECHAR>))* "\"\"\"">
   | <ECHAR: "\\" ["t", "b", "n", "r", "f", "\\", "\"", "\'"]>
   | <NIL: "(" (<WS>)+ ")">
   | <WS: " " | "	" | "\r" | "\n">
   | <ANON: "[" (<WS>)* "]">
   | <PN_CHARS_BASE: ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"] | ["\u00f8"-"\u02ff"] | ["\u0370"-"\u037d"] | ["\u037f"-"\u1fff"] | ["\u200c"-"\u200d"] | ["\u2070"-"\u218f"] | ["\u2c00"-"\u2fef"] | ["\u3001"-"\ud7ff"] | ["\uf900"-"\ufdcf"] | ["\ufdf0"-"\ufffd"]>
   | <PN_CHARS_U: <PN_CHARS_BASE> | "_">
   | <#VARNAME: (<PN_CHARS_U> | ["0"-"9"]) (<PN_CHARS_U> | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"])*>
   | <PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"]>
   | <PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS> | ".")* <PN_CHARS>)?>
   | <PN_LOCAL: (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS> | ".")* <PN_CHARS>)?>
   | <PUTATIVE_LITERAL: (["a"-"z", "A"-"Z", "0"-"9"])+ (("_")? (["a"-"z", "A"-"Z", "0"-"9"])+)*>
}

Query Query() :
{
   Prologue n0;
   NodeChoice n1;
   SelectQuery n2;
   ConstructQuery n3;
   DescribeQuery n4;
   AskQuery n5;

   
}
{
   n0=Prologue()
   (
      (
         n2=SelectQuery()
         { n1 = new NodeChoice(n2, 0); }
      |
         n3=ConstructQuery()
         { n1 = new NodeChoice(n3, 1); }
      |
         n4=DescribeQuery()
         { n1 = new NodeChoice(n4, 2); }
      |
         n5=AskQuery()
         { n1 = new NodeChoice(n5, 3); }
      )
      
   )
   
   { return new Query(n0,n1); }
}

Prologue Prologue() :
{
   NodeOptional n0 = new NodeOptional();
   BaseDecl n1;
   NodeListOptional n2 = new NodeListOptional();
   PrefixDecl n3;

   
}
{
   (
      n1=BaseDecl()
      { n0.addNode(n1); }
   )?
   (
      n3=PrefixDecl()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Prologue(n0,n2); }
}

BaseDecl BaseDecl() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<BASE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IRI_REF> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new BaseDecl(n0,n2); }
}

PrefixDecl PrefixDecl() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1=<PREFIX> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<PNAME_NS> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IRI_REF> { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new PrefixDecl(n0,n2,n4); }
}

SelectQuery SelectQuery() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeChoice n8;
   NodeList n9 = new NodeList();
   Var n10;
   NodeToken n11;
   Token n12;
   NodeListOptional n13 = new NodeListOptional();
   DatasetClause n14;
   WhereClause n15;
   SolutionModifier n16;

   
}
{
   n1=<SELECT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n5=<DISTINCT> { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3 = new NodeChoice(n4, 0); }
      |
         n7=<REDUCED> { n6 = JTBToolkit.makeNodeToken(n7); }
         { n3 = new NodeChoice(n6, 1); }
      )
      { n2.addNode(n3); }
   )?
   (
      (
         (
            n10=Var()
            { n9.addNode(n10); }
         )+
         { n9.nodes.trimToSize(); }
         { n8 = new NodeChoice(n9, 0); }
      |
         n12="*" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n8 = new NodeChoice(n11, 1); }
      )
      
   )
   (
      n14=DatasetClause()
      { n13.addNode(n14); }
   )*
   { n13.nodes.trimToSize(); }
   n15=WhereClause()
   n16=SolutionModifier()
   
   { return new SelectQuery(n0,n2,n8,n13,n15,n16); }
}

ConstructQuery ConstructQuery() :
{
   NodeToken n0;
   Token n1;
   ConstructTemplate n2;
   NodeListOptional n3 = new NodeListOptional();
   DatasetClause n4;
   WhereClause n5;
   SolutionModifier n6;

   
}
{
   n1=<CONSTRUCT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstructTemplate()
   (
      n4=DatasetClause()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n5=WhereClause()
   n6=SolutionModifier()
   
   { return new ConstructQuery(n0,n2,n3,n5,n6); }
}

DescribeQuery DescribeQuery() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   NodeList n3 = new NodeList();
   VarOrIRIref n4;
   NodeToken n5;
   Token n6;
   NodeListOptional n7 = new NodeListOptional();
   DatasetClause n8;
   NodeOptional n9 = new NodeOptional();
   WhereClause n10;
   SolutionModifier n11;

   
}
{
   n1=<DESCRIBE> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         (
            n4=VarOrIRIref()
            { n3.addNode(n4); }
         )+
         { n3.nodes.trimToSize(); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6="*" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      
   )
   (
      n8=DatasetClause()
      { n7.addNode(n8); }
   )*
   { n7.nodes.trimToSize(); }
   (
      n10=WhereClause()
      { n9.addNode(n10); }
   )?
   n11=SolutionModifier()
   
   { return new DescribeQuery(n0,n2,n7,n9,n11); }
}

AskQuery AskQuery() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   DatasetClause n3;
   WhereClause n4;

   
}
{
   n1=<ASK> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=DatasetClause()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n4=WhereClause()
   
   { return new AskQuery(n0,n2,n4); }
}

DatasetClause DatasetClause() :
{
   NodeToken n0;
   Token n1;
   NodeChoice n2;
   DefaultGraphClause n3;
   NamedGraphClause n4;

   
}
{
   n1=<FROM> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      (
         n3=DefaultGraphClause()
         { n2 = new NodeChoice(n3, 0); }
      |
         n4=NamedGraphClause()
         { n2 = new NodeChoice(n4, 1); }
      )
      
   )
   
   { return new DatasetClause(n0,n2); }
}

DefaultGraphClause DefaultGraphClause() :
{
   SourceSelector n0;

   
}
{
   n0=SourceSelector()
   
   { return new DefaultGraphClause(n0); }
}

NamedGraphClause NamedGraphClause() :
{
   NodeToken n0;
   Token n1;
   SourceSelector n2;

   
}
{
   n1=<NAMED> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=SourceSelector()
   
   { return new NamedGraphClause(n0,n2); }
}

SourceSelector SourceSelector() :
{
   IRIref n0;

   
}
{
   n0=IRIref()
   
   { return new SourceSelector(n0); }
}

WhereClause WhereClause() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   GroupGraphPattern n3;

   
}
{
   (
      n2=<WHERE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=GroupGraphPattern()
   
   { return new WhereClause(n0,n3); }
}

SolutionModifier SolutionModifier() :
{
   NodeOptional n0 = new NodeOptional();
   OrderClause n1;
   NodeOptional n2 = new NodeOptional();
   LimitOffsetClauses n3;

   
}
{
   (
      n1=OrderClause()
      { n0.addNode(n1); }
   )?
   (
      n3=LimitOffsetClauses()
      { n2.addNode(n3); }
   )?
   
   { return new SolutionModifier(n0,n2); }
}

LimitOffsetClauses LimitOffsetClauses() :
{
   NodeChoice n0;
   NodeSequence n1;
   LimitClause n2;
   NodeOptional n3 = new NodeOptional();
   OffsetClause n4;
   NodeSequence n5;
   OffsetClause n6;
   NodeOptional n7 = new NodeOptional();
   LimitClause n8;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n2=LimitClause()
         { n1.addNode(n2); }
         (
            n4=OffsetClause()
            { n3.addNode(n4); }
         )?
         { n1.addNode(n3); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n5 = new NodeSequence(2); }
         n6=OffsetClause()
         { n5.addNode(n6); }
         (
            n8=LimitClause()
            { n7.addNode(n8); }
         )?
         { n5.addNode(n7); }
         { n0 = new NodeChoice(n5, 1); }
      )
      
   )
   
   { return new LimitOffsetClauses(n0); }
}

OrderClause OrderClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeList n4 = new NodeList();
   OrderCondition n5;

   
}
{
   n1=<ORDER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<BY> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=OrderCondition()
      { n4.addNode(n5); }
   )+
   { n4.nodes.trimToSize(); }
   
   { return new OrderClause(n0,n2,n4); }
}

OrderCondition OrderCondition() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   BrackettedExpression n7;
   NodeChoice n8;
   Constraint n9;
   Var n10;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         (
            (
               n4=<ASC> { n3 = JTBToolkit.makeNodeToken(n4); }
               { n2 = new NodeChoice(n3, 0); }
            |
               n6=<DESC> { n5 = JTBToolkit.makeNodeToken(n6); }
               { n2 = new NodeChoice(n5, 1); }
            )
            
         )
         { n1.addNode(n2); }
         n7=BrackettedExpression()
         { n1.addNode(n7); }
         
      )
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         (
            n9=Constraint()
            { n8 = new NodeChoice(n9, 0); }
         |
            n10=Var()
            { n8 = new NodeChoice(n10, 1); }
         )
         
      )
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new OrderCondition(n0); }
}

LimitClause LimitClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<LIMIT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INTEGER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new LimitClause(n0,n2); }
}

OffsetClause OffsetClause() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;

   
}
{
   n1=<OFFSET> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<INTEGER> { n2 = JTBToolkit.makeNodeToken(n3); }
   
   { return new OffsetClause(n0,n2); }
}

GroupGraphPattern GroupGraphPattern() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TriplesBlock n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   GraphPatternNotTriples n6;
   NodeOptional n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   TriplesBlock n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=TriplesBlock()
      { n2.addNode(n3); }
   )?
   (
      { n7 = new NodeOptional(); }
      { n10 = new NodeOptional(); }
      { n5 = new NodeSequence(3); }
      n6=GraphPatternNotTriples()
      { n5.addNode(n6); }
      (
         n9="." { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
      )?
      { n5.addNode(n7); }
      (
         n11=TriplesBlock()
         { n10.addNode(n11); }
      )?
      { n5.addNode(n10); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n13="}" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new GroupGraphPattern(n0,n2,n4,n12); }
}

TriplesBlock TriplesBlock() :
{
   TriplesSameSubject n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   TriplesBlock n6;

   
}
{
   n0=TriplesSameSubject()
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n6=TriplesBlock()
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new TriplesBlock(n0,n1); }
}

GraphPatternNotTriples GraphPatternNotTriples() :
{
   NodeChoice n0;
   OptionalGraphPattern n1;
   GroupOrUnionGraphPattern n2;
   GraphGraphPattern n3;
   Filter n4;
   Bind n5;

   
}
{
   (
      n1=OptionalGraphPattern()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GroupOrUnionGraphPattern()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=GraphGraphPattern()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=Filter()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=Bind()
      { n0 = new NodeChoice(n5, 4); }
   )
   
   { return new GraphPatternNotTriples(n0); }
}

OptionalGraphPattern OptionalGraphPattern() :
{
   NodeToken n0;
   Token n1;
   GroupGraphPattern n2;

   
}
{
   n1=<OPTIONAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=GroupGraphPattern()
   
   { return new OptionalGraphPattern(n0,n2); }
}

GraphGraphPattern GraphGraphPattern() :
{
   NodeToken n0;
   Token n1;
   VarOrIRIref n2;
   GroupGraphPattern n3;

   
}
{
   n1=<GRAPH> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=VarOrIRIref()
   n3=GroupGraphPattern()
   
   { return new GraphGraphPattern(n0,n2,n3); }
}

GroupOrUnionGraphPattern GroupOrUnionGraphPattern() :
{
   GroupGraphPattern n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   GroupGraphPattern n5;

   
}
{
   n0=GroupGraphPattern()
   (
      { n2 = new NodeSequence(2); }
      n4=<UNION> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=GroupGraphPattern()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new GroupOrUnionGraphPattern(n0,n1); }
}

Filter Filter() :
{
   NodeToken n0;
   Token n1;
   Constraint n2;

   
}
{
   n1=<FILTER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Constraint()
   
   { return new Filter(n0,n2); }
}

Constraint Constraint() :
{
   NodeChoice n0;
   BrackettedExpression n1;
   BuiltInCall n2;
   FunctionCall n3;

   
}
{
   (
      n1=BrackettedExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BuiltInCall()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=FunctionCall()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Constraint(n0); }
}

FunctionCall FunctionCall() :
{
   IRIref n0;
   ArgList n1;

   
}
{
   n0=IRIref()
   n1=ArgList()
   
   { return new FunctionCall(n0,n1); }
}

ArgList ArgList() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeToken n12;
   Token n13;

   
}
{
   (
      (
         n2=<NIL> { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n3 = new NodeSequence(4); }
         n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Expression()
         { n3.addNode(n6); }
         (
            { n8 = new NodeSequence(2); }
            n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
            { n8.addNode(n9); }
            n11=Expression()
            { n8.addNode(n11); }
            { n7.addNode(n8); }
         )*
         { n7.nodes.trimToSize(); }
         { n3.addNode(n7); }
         n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n3.addNode(n12); }
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   
   { return new ArgList(n0); }
}

ConstructTemplate ConstructTemplate() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ConstructTriples n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ConstructTriples()
      { n2.addNode(n3); }
   )?
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ConstructTemplate(n0,n2,n4); }
}

ConstructTriples ConstructTriples() :
{
   TriplesSameSubject n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   ConstructTriples n6;

   
}
{
   n0=TriplesSameSubject()
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n6=ConstructTriples()
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new ConstructTriples(n0,n1); }
}

TriplesSameSubject TriplesSameSubject() :
{
   NodeChoice n0;
   NodeSequence n1;
   VarOrTerm n2;
   PropertyListNotEmpty n3;
   NodeSequence n4;
   TriplesNode n5;
   PropertyList n6;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=VarOrTerm()
      { n1.addNode(n2); }
      n3=PropertyListNotEmpty()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n5=TriplesNode()
      { n4.addNode(n5); }
      n6=PropertyList()
      { n4.addNode(n6); }
      { n0 = new NodeChoice(n4, 1); }
   )
   
   { return new TriplesSameSubject(n0); }
}

PropertyListNotEmpty PropertyListNotEmpty() :
{
   Verb n0;
   ObjectList n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeOptional n6;
   NodeSequence n7;
   Verb n8;
   ObjectList n9;

   
}
{
   n0=Verb()
   n1=ObjectList()
   (
      { n6 = new NodeOptional(); }
      { n3 = new NodeSequence(2); }
      n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      (
         { n7 = new NodeSequence(2); }
         n8=Verb()
         { n7.addNode(n8); }
         n9=ObjectList()
         { n7.addNode(n9); }
         { n6.addNode(n7); }
      )?
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new PropertyListNotEmpty(n0,n1,n2); }
}

PropertyList PropertyList() :
{
   NodeOptional n0 = new NodeOptional();
   PropertyListNotEmpty n1;

   
}
{
   (
      n1=PropertyListNotEmpty()
      { n0.addNode(n1); }
   )?
   
   { return new PropertyList(n0); }
}

ObjectList ObjectList() :
{
   SparqlObject n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   SparqlObject n5;

   
}
{
   n0=SparqlObject()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=SparqlObject()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ObjectList(n0,n1); }
}

SparqlObject SparqlObject() :
{
   GraphNode n0;

   
}
{
   n0=GraphNode()
   
   { return new SparqlObject(n0); }
}

Verb Verb() :
{
   NodeChoice n0;
   VarOrIRIref n1;
   NodeToken n2;
   Token n3;
   PutativeLiteral n4;

   
}
{
   (
      n1=VarOrIRIref()
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=<TYPE_A> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n4=PutativeLiteral()
      { n0 = new NodeChoice(n4, 2); }
   )
   
   { return new Verb(n0); }
}

TriplesNode TriplesNode() :
{
   NodeChoice n0;
   SparqlCollection n1;
   BlankNodePropertyList n2;

   
}
{
   (
      n1=SparqlCollection()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BlankNodePropertyList()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TriplesNode(n0); }
}

BlankNodePropertyList BlankNodePropertyList() :
{
   NodeToken n0;
   Token n1;
   PropertyListNotEmpty n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="[" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PropertyListNotEmpty()
   n4="]" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BlankNodePropertyList(n0,n2,n3); }
}

SparqlCollection SparqlCollection() :
{
   NodeToken n0;
   Token n1;
   NodeList n2 = new NodeList();
   GraphNode n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=GraphNode()
      { n2.addNode(n3); }
   )+
   { n2.nodes.trimToSize(); }
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new SparqlCollection(n0,n2,n4); }
}

GraphNode GraphNode() :
{
   NodeChoice n0;
   VarOrTerm n1;
   TriplesNode n2;

   
}
{
   (
      n1=VarOrTerm()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=TriplesNode()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new GraphNode(n0); }
}

VarOrTerm VarOrTerm() :
{
   NodeChoice n0;
   Var n1;
   GraphTerm n2;

   
}
{
   (
      n1=Var()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=GraphTerm()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new VarOrTerm(n0); }
}

VarOrIRIref VarOrIRIref() :
{
   NodeChoice n0;
   Var n1;
   IRIref n2;

   
}
{
   (
      n1=Var()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=IRIref()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new VarOrIRIref(n0); }
}

Var Var() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<VAR1> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<VAR2> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new Var(n0); }
}

GraphTerm GraphTerm() :
{
   NodeChoice n0;
   IRIref n1;
   RDFLiteral n2;
   NumericLiteral n3;
   BooleanLiteral n4;
   BlankNode n5;
   PutativeLiteral n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n1=IRIref()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=RDFLiteral()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=NumericLiteral()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=BooleanLiteral()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=BlankNode()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=PutativeLiteral()
      { n0 = new NodeChoice(n6, 5); }
   |
      n8=<NIL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new GraphTerm(n0); }
}

Expression Expression() :
{
   ConditionalOrExpression n0;

   
}
{
   n0=ConditionalOrExpression()
   
   { return new Expression(n0); }
}

ConditionalOrExpression ConditionalOrExpression() :
{
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ConditionalAndExpression n5;

   
}
{
   n0=ConditionalAndExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="||" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ConditionalAndExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalOrExpression(n0,n1); }
}

ConditionalAndExpression ConditionalAndExpression() :
{
   ValueLogical n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ValueLogical n5;

   
}
{
   n0=ValueLogical()
   (
      { n2 = new NodeSequence(2); }
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ValueLogical()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalAndExpression(n0,n1); }
}

ValueLogical ValueLogical() :
{
   RelationalExpression n0;

   
}
{
   n0=RelationalExpression()
   
   { return new ValueLogical(n0); }
}

RelationalExpression RelationalExpression() :
{
   NumericExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NumericExpression n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NumericExpression n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NumericExpression n14;
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   NumericExpression n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   NumericExpression n22;
   NodeSequence n23;
   NodeToken n24;
   Token n25;
   NumericExpression n26;

   
}
{
   n0=NumericExpression()
   (
      (
         { n3 = new NodeSequence(2); }
         n5="=" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=NumericExpression()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9="!=" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=NumericExpression()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      |
         { n11 = new NodeSequence(2); }
         n13="<" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n11.addNode(n12); }
         n14=NumericExpression()
         { n11.addNode(n14); }
         { n2 = new NodeChoice(n11, 2); }
      |
         { n15 = new NodeSequence(2); }
         n17=">" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n18=NumericExpression()
         { n15.addNode(n18); }
         { n2 = new NodeChoice(n15, 3); }
      |
         { n19 = new NodeSequence(2); }
         n21="<=" { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
         n22=NumericExpression()
         { n19.addNode(n22); }
         { n2 = new NodeChoice(n19, 4); }
      |
         { n23 = new NodeSequence(2); }
         n25=">=" { n24 = JTBToolkit.makeNodeToken(n25); }
         { n23.addNode(n24); }
         n26=NumericExpression()
         { n23.addNode(n26); }
         { n2 = new NodeChoice(n23, 5); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new RelationalExpression(n0,n1); }
}

NumericExpression NumericExpression() :
{
   AdditiveExpression n0;

   
}
{
   n0=AdditiveExpression()
   
   { return new NumericExpression(n0); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   MultiplicativeExpression n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   MultiplicativeExpression n10;
   NumericLiteralPositive n11;
   NumericLiteralNegative n12;

   
}
{
   n0=MultiplicativeExpression()
   (
      (
         { n3 = new NodeSequence(2); }
         n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=MultiplicativeExpression()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9="-" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=MultiplicativeExpression()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      |
         n11=NumericLiteralPositive()
         { n2 = new NodeChoice(n11, 2); }
      |
         n12=NumericLiteralNegative()
         { n2 = new NodeChoice(n12, 3); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeChoice n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   UnaryExpression n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;

   
}
{
   n0=UnaryExpression()
   (
      (
         { n3 = new NodeSequence(2); }
         n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=UnaryExpression()
         { n3.addNode(n6); }
         { n2 = new NodeChoice(n3, 0); }
      |
         { n7 = new NodeSequence(2); }
         n9="/" { n8 = JTBToolkit.makeNodeToken(n9); }
         { n7.addNode(n8); }
         n10=UnaryExpression()
         { n7.addNode(n10); }
         { n2 = new NodeChoice(n7, 1); }
      )
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimaryExpression n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   PrimaryExpression n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   PrimaryExpression n12;
   PrimaryExpression n13;

   
}
{
   (
      (
         { n1 = new NodeSequence(2); }
         n3="!" { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n4=PrimaryExpression()
         { n1.addNode(n4); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n5 = new NodeSequence(2); }
         n7="+" { n6 = JTBToolkit.makeNodeToken(n7); }
         { n5.addNode(n6); }
         n8=PrimaryExpression()
         { n5.addNode(n8); }
         { n0 = new NodeChoice(n5, 1); }
      |
         { n9 = new NodeSequence(2); }
         n11="-" { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n12=PrimaryExpression()
         { n9.addNode(n12); }
         { n0 = new NodeChoice(n9, 2); }
      |
         n13=PrimaryExpression()
         { n0 = new NodeChoice(n13, 3); }
      )
      
   )
   
   { return new UnaryExpression(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   NodeChoice n0;
   BrackettedExpression n1;
   BuiltInCall n2;
   IRIrefOrFunction n3;
   RDFLiteral n4;
   NumericLiteral n5;
   BooleanLiteral n6;
   Var n7;

   
}
{
   (
      n1=BrackettedExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=BuiltInCall()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=IRIrefOrFunction()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=RDFLiteral()
      { n0 = new NodeChoice(n4, 3); }
   |
      n5=NumericLiteral()
      { n0 = new NodeChoice(n5, 4); }
   |
      n6=BooleanLiteral()
      { n0 = new NodeChoice(n6, 5); }
   |
      n7=Var()
      { n0 = new NodeChoice(n7, 6); }
   )
   
   { return new PrimaryExpression(n0); }
}

BrackettedExpression BrackettedExpression() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new BrackettedExpression(n0,n2,n3); }
}

BuiltInCall BuiltInCall() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   Expression n22;
   NodeToken n23;
   Token n24;
   Expression n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   NodeToken n31;
   Token n32;
   Expression n33;
   NodeToken n34;
   Token n35;
   NodeSequence n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   Var n41;
   NodeToken n42;
   Token n43;
   NodeSequence n44;
   NodeToken n45;
   Token n46;
   NodeToken n47;
   Token n48;
   Expression n49;
   NodeToken n50;
   Token n51;
   Expression n52;
   NodeToken n53;
   Token n54;
   NodeSequence n55;
   NodeToken n56;
   Token n57;
   NodeToken n58;
   Token n59;
   Expression n60;
   NodeToken n61;
   Token n62;
   NodeSequence n63;
   NodeToken n64;
   Token n65;
   NodeToken n66;
   Token n67;
   Expression n68;
   NodeToken n69;
   Token n70;
   NodeSequence n71;
   NodeToken n72;
   Token n73;
   NodeToken n74;
   Token n75;
   Expression n76;
   NodeToken n77;
   Token n78;
   NodeSequence n79;
   NodeToken n80;
   Token n81;
   NodeToken n82;
   Token n83;
   Expression n84;
   NodeToken n85;
   Token n86;
   RegexExpression n87;

   
}
{
   (
      (
         { n1 = new NodeSequence(4); }
         n3=<STR> { n2 = JTBToolkit.makeNodeToken(n3); }
         { n1.addNode(n2); }
         n5="(" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n1.addNode(n4); }
         n6=Expression()
         { n1.addNode(n6); }
         n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n1.addNode(n7); }
         { n0 = new NodeChoice(n1, 0); }
      |
         { n9 = new NodeSequence(4); }
         n11=<LANG> { n10 = JTBToolkit.makeNodeToken(n11); }
         { n9.addNode(n10); }
         n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
         { n9.addNode(n12); }
         n14=Expression()
         { n9.addNode(n14); }
         n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n9.addNode(n15); }
         { n0 = new NodeChoice(n9, 1); }
      |
         { n17 = new NodeSequence(6); }
         n19=<LANGMATCHES> { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         n21="(" { n20 = JTBToolkit.makeNodeToken(n21); }
         { n17.addNode(n20); }
         n22=Expression()
         { n17.addNode(n22); }
         n24="," { n23 = JTBToolkit.makeNodeToken(n24); }
         { n17.addNode(n23); }
         n25=Expression()
         { n17.addNode(n25); }
         n27=")" { n26 = JTBToolkit.makeNodeToken(n27); }
         { n17.addNode(n26); }
         { n0 = new NodeChoice(n17, 2); }
      |
         { n28 = new NodeSequence(4); }
         n30=<DATATYPE> { n29 = JTBToolkit.makeNodeToken(n30); }
         { n28.addNode(n29); }
         n32="(" { n31 = JTBToolkit.makeNodeToken(n32); }
         { n28.addNode(n31); }
         n33=Expression()
         { n28.addNode(n33); }
         n35=")" { n34 = JTBToolkit.makeNodeToken(n35); }
         { n28.addNode(n34); }
         { n0 = new NodeChoice(n28, 3); }
      |
         { n36 = new NodeSequence(4); }
         n38=<BOUND> { n37 = JTBToolkit.makeNodeToken(n38); }
         { n36.addNode(n37); }
         n40="(" { n39 = JTBToolkit.makeNodeToken(n40); }
         { n36.addNode(n39); }
         n41=Var()
         { n36.addNode(n41); }
         n43=")" { n42 = JTBToolkit.makeNodeToken(n43); }
         { n36.addNode(n42); }
         { n0 = new NodeChoice(n36, 4); }
      |
         { n44 = new NodeSequence(6); }
         n46=<SAME_TERM> { n45 = JTBToolkit.makeNodeToken(n46); }
         { n44.addNode(n45); }
         n48="(" { n47 = JTBToolkit.makeNodeToken(n48); }
         { n44.addNode(n47); }
         n49=Expression()
         { n44.addNode(n49); }
         n51="," { n50 = JTBToolkit.makeNodeToken(n51); }
         { n44.addNode(n50); }
         n52=Expression()
         { n44.addNode(n52); }
         n54=")" { n53 = JTBToolkit.makeNodeToken(n54); }
         { n44.addNode(n53); }
         { n0 = new NodeChoice(n44, 5); }
      |
         { n55 = new NodeSequence(4); }
         n57=<IS_IRI> { n56 = JTBToolkit.makeNodeToken(n57); }
         { n55.addNode(n56); }
         n59="(" { n58 = JTBToolkit.makeNodeToken(n59); }
         { n55.addNode(n58); }
         n60=Expression()
         { n55.addNode(n60); }
         n62=")" { n61 = JTBToolkit.makeNodeToken(n62); }
         { n55.addNode(n61); }
         { n0 = new NodeChoice(n55, 6); }
      |
         { n63 = new NodeSequence(4); }
         n65=<IS_URI> { n64 = JTBToolkit.makeNodeToken(n65); }
         { n63.addNode(n64); }
         n67="(" { n66 = JTBToolkit.makeNodeToken(n67); }
         { n63.addNode(n66); }
         n68=Expression()
         { n63.addNode(n68); }
         n70=")" { n69 = JTBToolkit.makeNodeToken(n70); }
         { n63.addNode(n69); }
         { n0 = new NodeChoice(n63, 7); }
      |
         { n71 = new NodeSequence(4); }
         n73=<IS_BLANK> { n72 = JTBToolkit.makeNodeToken(n73); }
         { n71.addNode(n72); }
         n75="(" { n74 = JTBToolkit.makeNodeToken(n75); }
         { n71.addNode(n74); }
         n76=Expression()
         { n71.addNode(n76); }
         n78=")" { n77 = JTBToolkit.makeNodeToken(n78); }
         { n71.addNode(n77); }
         { n0 = new NodeChoice(n71, 8); }
      |
         { n79 = new NodeSequence(4); }
         n81=<IS_LITERAL> { n80 = JTBToolkit.makeNodeToken(n81); }
         { n79.addNode(n80); }
         n83="(" { n82 = JTBToolkit.makeNodeToken(n83); }
         { n79.addNode(n82); }
         n84=Expression()
         { n79.addNode(n84); }
         n86=")" { n85 = JTBToolkit.makeNodeToken(n86); }
         { n79.addNode(n85); }
         { n0 = new NodeChoice(n79, 9); }
      |
         n87=RegexExpression()
         { n0 = new NodeChoice(n87, 10); }
      )
      
   )
   
   { return new BuiltInCall(n0); }
}

RegexExpression RegexExpression() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<REGEX> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   (
      { n9 = new NodeSequence(2); }
      n11="," { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Expression()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   n14=")" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new RegexExpression(n0,n2,n4,n5,n7,n8,n13); }
}

IRIrefOrFunction IRIrefOrFunction() :
{
   IRIref n0;
   NodeOptional n1 = new NodeOptional();
   ArgList n2;

   
}
{
   n0=IRIref()
   (
      n2=ArgList()
      { n1.addNode(n2); }
   )?
   
   { return new IRIrefOrFunction(n0,n1); }
}

RDFLiteral RDFLiteral() :
{
   SparqlString n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   IRIref n8;

   
}
{
   n0=SparqlString()
   (
      (
         n4=<LANGTAG> { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         (
            { n5 = new NodeSequence(2); }
            n7="^^" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n5.addNode(n6); }
            n8=IRIref()
            { n5.addNode(n8); }
            
         )
         { n2 = new NodeChoice(n5, 1); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new RDFLiteral(n0,n1); }
}

NumericLiteral NumericLiteral() :
{
   NodeChoice n0;
   NumericLiteralUnsigned n1;
   NumericLiteralPositive n2;
   NumericLiteralNegative n3;

   
}
{
   (
      (
         n1=NumericLiteralUnsigned()
         { n0 = new NodeChoice(n1, 0); }
      |
         n2=NumericLiteralPositive()
         { n0 = new NodeChoice(n2, 1); }
      |
         n3=NumericLiteralNegative()
         { n0 = new NodeChoice(n3, 2); }
      )
      
   )
   
   { return new NumericLiteral(n0); }
}

NumericLiteralUnsigned NumericLiteralUnsigned() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<INTEGER> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DECIMAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DOUBLE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new NumericLiteralUnsigned(n0); }
}

NumericLiteralPositive NumericLiteralPositive() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<INTEGER_POSITIVE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DECIMAL_POSITIVE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DOUBLE_POSITIVE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new NumericLiteralPositive(n0); }
}

NumericLiteralNegative NumericLiteralNegative() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<INTEGER_NEGATIVE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<DECIMAL_NEGATIVE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<DOUBLE_NEGATIVE> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new NumericLiteralNegative(n0); }
}

BooleanLiteral BooleanLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<TRUE> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FALSE> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BooleanLiteral(n0); }
}

SparqlString SparqlString() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   (
      n2=<STRING_LITERAL1> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<STRING_LITERAL2> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STRING_LITERAL_LONG1> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL_LONG2> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   )
   
   { return new SparqlString(n0); }
}

IRIref IRIref() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   PrefixedName n3;

   
}
{
   (
      n2=<IRI_REF> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=PrefixedName()
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new IRIref(n0); }
}

PrefixedName PrefixedName() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<PNAME_LN> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<PNAME_NS> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new PrefixedName(n0); }
}

BlankNode BlankNode() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2=<BLANK_NODE_LABEL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<ANON> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BlankNode(n0); }
}

PutativeLiteral PutativeLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<PUTATIVE_LITERAL> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new PutativeLiteral(n0); }
}

SparqlSpin SparqlSpin() :
{
   Prologue n0;
   NodeList n1 = new NodeList();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Rule n5;
   NodeToken n6;
   Token n7;

   
}
{
   n0=Prologue()
   (
      { n2 = new NodeSequence(3); }
      n4="[" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Rule()
      { n2.addNode(n5); }
      n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      { n1.addNode(n2); }
   )+
   { n1.nodes.trimToSize(); }
   
   { return new SparqlSpin(n0,n1); }
}

Rule Rule() :
{
   Consequent n0;
   NodeToken n1;
   Token n2;
   Antecedent n3;

   
}
{
   n0=Consequent()
   n2=<WHERE> { n1 = JTBToolkit.makeNodeToken(n2); }
   n3=Antecedent()
   
   { return new Rule(n0,n1,n3); }
}

Consequent Consequent() :
{
   NodeChoice n0;
   RuleConstructClause n1;
   RuleModifyClause n2;

   
}
{
   (
      n1=RuleConstructClause()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=RuleModifyClause()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Consequent(n0); }
}

RuleConstructClause RuleConstructClause() :
{
   NodeToken n0;
   Token n1;
   ConstructTemplate n2;
   NodeListOptional n3 = new NodeListOptional();
   DatasetClause n4;

   
}
{
   n1=<CONSTRUCT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ConstructTemplate()
   (
      n4=DatasetClause()
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new RuleConstructClause(n0,n2,n3); }
}

RuleModifyClause RuleModifyClause() :
{
   NodeToken n0;
   Token n1;
   DeleteClause n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   InsertClause n7;

   
}
{
   n1=<DELETE> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=DeleteClause()
   (
      { n4 = new NodeSequence(2); }
      n6=<INSERT> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=InsertClause()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   
   { return new RuleModifyClause(n0,n2,n3); }
}

DeleteClause DeleteClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   DeleteTriples n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=DeleteTriples()
      { n2.addNode(n3); }
   )?
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new DeleteClause(n0,n2,n4); }
}

DeleteTriples DeleteTriples() :
{
   TriplesSameSubject n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   DeleteTriples n6;

   
}
{
   n0=TriplesSameSubject()
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n6=DeleteTriples()
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new DeleteTriples(n0,n1); }
}

InsertClause InsertClause() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   InsertTriples n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=InsertTriples()
      { n2.addNode(n3); }
   )?
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new InsertClause(n0,n2,n4); }
}

InsertTriples InsertTriples() :
{
   TriplesSameSubject n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5;
   InsertTriples n6;

   
}
{
   n0=TriplesSameSubject()
   (
      { n5 = new NodeOptional(); }
      { n2 = new NodeSequence(2); }
      n4="." { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n6=InsertTriples()
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InsertTriples(n0,n1); }
}

Antecedent Antecedent() :
{
   WhereClause n0;
   SolutionModifier n1;

   
}
{
   n0=WhereClause()
   n1=SolutionModifier()
   
   { return new Antecedent(n0,n1); }
}

Bind Bind() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Var n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1=<BIND> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=<AS> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Var()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new Bind(n0,n2,n4,n5,n7,n8); }
}
